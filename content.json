{"meta":{"title":"有恒则成","subtitle":null,"description":null,"author":"王恒","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"React-Native 开发篇一React-Native+Redux开发框架搭建","slug":"react-native-redux-demo","date":"2018-02-02T09:01:55.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/02/02/react-native-redux-demo/","link":"","permalink":"http://yoursite.com/2018/02/02/react-native-redux-demo/","excerpt":"","text":"前言：从事react-native开发一年半的时间了，从最初的0.17版本开始接触react-native到现在的0.51稳定版，期间从一开始的看着官方文档自我摸索到后来的渐渐社区庞大，各种组件层出不穷，react-native虽然越发成熟，然而大版本的改动，新技术的更替往往让人措手不及，从一开始的单页面涵盖组件，状态以及后台交互代码，到后来的组件拆分，说不上那种更好，但往往我们习惯学习大部分人的想法，接触了一段时间的redux之后，远远不及精通，甚至有时候只是知其然而不知其所以然，然而生活总有新的东西要去做，最近要去搞vue了，避免新的东西取代大脑里面旧的东西，暂切在此记录以下react-native开发过程中的一些经验和总结，以便以后查阅。本文记录使用redux状态管理机制来配合react-native开发的一些过程。 一.项目初始化react-native init reduxDemo 初始化完成后控制台输出如下信息： 二. 依赖安装必须依赖项： npm install redux –save npm install react-redux –save npm install redux-thunk –save 扩展依赖： npm install immutable –save npm install react-native-router-flux –save三.项目结构 src-项目文件总文件夹。– src/modules-项目模块文件夹，按模块规划建立子文件夹，按每个模块划分项的state,reducer和action,(问题：按模块划分还是页面单独划分为好？)如登录授权模块为auth。— src/modules/auth-登录授权模块。– src/resource-整个项目资源文件，多为图片，问题：资源文件是放置到相应的模块文件夹下还是在此处统一管理，那种较好？不知道，大概各有各的好吧。–src/actionTypes.js-整个项目操作定义。–src/appState.js-整个项目状态统一管理。–src/actionStore.js-state中间件。–src/actionReducer.js-整个项目reducer 统一管理。–src/actionRoot.js-项目路由管理。四.核心代码 appState.js123456789import authState from &apos;./modules/auth/authState&apos;;export default function getAppState () &#123; const appState = &#123; auth: new authState() //...其他模块State &#125; return appState;&#125; 备注：整个APP状态汇总，开发时定义在各个模块下，此处由各个模块文件引入做统一管理。 2.appTypes.js12export const LOGIN_SUCCESS = &apos;LOGIN_SUCCESS&apos;;//登录成功export const LOGIN_FAILURE = &apos;LOGIN_FAILURE&apos;;//登录失败 备注：reducer中更新状态使用。 3.appReducer.js12345678import auth from &apos;./modules/auth/authReducer&apos;;import &#123; combineReducers &#125; from &apos;redux&apos;;const appReducer = combineReducers(&#123; auth //...其他模块reducer&#125;);export default appReducer; 备注：整个APP Reducer汇总，开发时定义在各个模块下，此处由各个模块文件引入做统一管理。 4.appStore.js123456789101112import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;import thunk from &apos;redux-thunk&apos;;import reducer from &apos;./appReducer&apos;;import getAppState from &apos;./appState&apos;;const createStoreWithMiddleware = applyMiddleware(thunk) (createStore);function configureStore (initialState) &#123; return createStoreWithMiddleware(reducer, initialState);&#125;var appStore=configureStore(getAppState());export default appStore; 5.appRoot.js12345678910111213141516171819202122232425262728293031323334353637383940414243import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Provider &#125; from &apos;react-redux&apos;;import &#123; View, Text, BackAndroid&#125; from &apos;react-native&apos;;import &#123; Scene, Router, TabBar, Modal, Schema, Actions, Reducer, ActionConst &#125; from &apos;react-native-router-flux&apos;;import LoginPage from &apos;./modules/auth/containers/loginPage&apos;;export default class AppRoot extends Component &#123; constructor(props) &#123; super(props); &#125; createReducer(params) &#123; const defaultReducer = Reducer(params); return (state, action) =&gt; &#123; this.props.dispatch(action); return defaultReducer(state, action); &#125;; &#125; onExitApp()&#123; BackAndroid.exitApp(); return true; &#125; render() &#123; return ( &lt;Router onExitApp=&#123;this.onExitApp&#125; createReducer=&#123; this.createReducer &#125; scenes=&#123; scenes &#125; &gt; &lt;/Router &gt; ) &#125; &#125;const scenes = Actions.create( &lt;Scene key=&quot;root&quot; hideNavBar=&#123;true&#125;&gt; &lt;Scene key=&quot;login&quot; component=&#123;LoginPage&#125; title=&quot;登录&quot; hideNavBar=&#123;true&#125; initial /&gt; &lt;/Scene&gt;) 备注：APP路由管理页面。 6.App.js1234567891011121314151617import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Provider &#125; from &apos;react-redux&apos;;import AppRoot from &apos;./src/appRoot&apos;;import appStore from &apos;./src/appStore&apos;;export default class App extends Component&lt;&#123;&#125;&gt; &#123; constructor(props) &#123; super(props); &#125; render() &#123; return ( &lt;Provider store=&#123;appStore&#125;&gt; &lt;AppRoot /&gt; &lt;/Provider&gt; ); &#125;&#125; 备注：APP入口。 五.示例模块模块结构： 1.state定义1234567import &#123; Record, List &#125; from &apos;immutable&apos;;let authState = Record(&#123; isLogin:false&#125;);export default authState; 2.action定义1234567import * as types from &apos;../../actionTypes&apos;;export function login(userName,password) &#123; return &#123; type:types.LOGIN_SUCCESS &#125; &#125; 3.reducer定义12345678910111213141516import AuthState from &apos;./authState&apos;;import * as types from &apos;../../actionTypes&apos;;import Immutable, &#123; Record, List &#125; from &apos;immutable&apos;;const authState = new AuthState();export default function authReducer(state = authState, action) &#123; switch (action.type) &#123; case types.LOGIN_SUCCESS: return state.set(&apos;isLogin&apos;, true); case types.LOGIN_FAILURE: return state.set(&apos;isLogin&apos;, false); default: return state; &#125; return state;&#125; 4.component定义123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import React, &#123; Component &#125; from &apos;react&apos;;import &#123; StyleSheet, Platform, TextInput, View, Dimensions, Text,ImageBackground, Image, TouchableOpacity &#125; from &apos;react-native&apos;;export default class LoginComponent extends Component &#123; constructor(props) &#123; super(props); &#125; render() &#123; return ( &lt;ImageBackground source=&#123;require(&apos;../../../resource/login-background.jpg&apos;)&#125; resizeMode=&apos;stretch&apos; style=&#123;[styles.stretch,styles.center]&#125;&gt; &lt;Image source=&#123;require(&apos;../../../resource/logo.png&apos;)&#125; style=&#123;styles.logo&#125;/&gt; &lt;TextInput placeholder=&apos;请输入您的用户名&apos; style=&#123;styles.input&#125;/&gt; &lt;TextInput placeholder=&apos;请输入您的密码&apos; secureTextEntry=&#123;true&#125; style=&#123;styles.input&#125;/&gt; &lt;TouchableOpacity style=&#123;[styles.btn,styles.center]&#125; onPress=&#123;this.props.onLogin&#125;&gt; &lt;Text style=&#123;styles.text&#125;&gt;登录&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/ImageBackground&gt; ) &#125; &#125;var &#123;height, width&#125; = Dimensions.get(&apos;window&apos;);const styles = StyleSheet.create(&#123; logo:&#123; width:80, height:80, marginBottom:50 &#125;, center:&#123; alignItems: &apos;center&apos;, justifyContent:&apos;center&apos; &#125;, stretch: &#123; height:height, width:width &#125;, input:&#123; height:30, width:width*0.6, padding:0, borderBottomWidth:1, borderBottomColor:&quot;#8ecbc1&quot;, paddingLeft:20, marginBottom:10 &#125;, btn:&#123; width:width*0.6, backgroundColor:&quot;#8ecbc1&quot;, height:32, marginTop:20 &#125;, text:&#123; color:&quot;#fff&quot;, fontSize:16 &#125;&#125;); 5.container定义12345678910111213141516171819202122232425262728293031323334353637import React, &#123; Component &#125; from &apos;react&apos;;import LoginComponent from &quot;../components/loginComponent&quot;import &#123; bindActionCreators &#125; from &apos;redux&apos;;import &#123; connect &#125; from &apos;react-redux&apos;;import * as authActions from &apos;../authActions&apos;;class LoginPage extends Component &#123; constructor(props) &#123; super(props); &#125; componentWillReceiveProps(nextProps,nextState)&#123; if(nextProps.isLogin)&#123; alert(&quot;登录成功&quot;); &#125; &#125; render() &#123; return ( &lt;LoginComponent onLogin=&#123;this.props.actions.login&#125;/&gt; ) &#125; &#125;function mapStateToProps(state) &#123; return &#123; isLogin:state.auth.isLogin &#125;&#125;function mapDispatchToProps(dispatch) &#123; return &#123; actions: bindActionCreators(authActions, dispatch) &#125;&#125;export default connect(mapStateToProps, mapDispatchToProps)(LoginPage); 六.参考资料- redux中文文档GIT源码地址：react-native-demo 分支名称：framework (git checkout framework)","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":".Net 开发框架ABP学习资料整理","slug":"abp","date":"2018-01-21T09:31:43.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/21/abp/","link":"","permalink":"http://yoursite.com/2018/01/21/abp/","excerpt":"","text":"前言：离开.Net后台开发有一些日子了，近两年来基本都是在搞前端开发，React-Native/HTML+CSS+JS,最近突然想研究以下后端的一些东西，想找到一个规范一点的框架结构，找来找去找到了ABP，初看他的相关文档确实让我眼前一亮，有想深入研究的打算，于是网上找了一些资料，稍作记录，待慢慢研究。 资料ABP官方 : https://aspnetboilerplate.comABP翻译文档 : https://github.com/ABPFrameWorkGroup/AbpDocument2Chinese博客：阳光铭睿 : http://www.cnblogs.com/mienreal/p/4528470.html","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://yoursite.com/tags/C/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}]},{"title":"关于程序员的59条搞笑但却真实无比的编程语录","slug":"programming-quotations","date":"2018-01-20T05:00:00.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/20/programming-quotations/","link":"","permalink":"http://yoursite.com/2018/01/20/programming-quotations/","excerpt":"","text":"程序员编程语录 一个好的程序员是那种过单行线马路都要往两边看的人。(Doug Linder) 程序有问题时不要担心。如果所有东西都没问题，你就失业了。(软件工程的Mosher定律) 程序员的麻烦在于，你无法弄清他在捣腾什么，当你最终弄明白时，也许已经晚了。(超级计算机之父Seymour Cray) 我想大部分人都知道通常一个程序员会具有的美德。当然了，有三种：懒惰，暴躁，傲慢。(Perl语言发明者Larry Wall) 编程时要保持这种心态：就好象将来要维护你这些代码的人是一位残暴的精神病患者，而且他知道你住在哪。(Martin Golding) 一个人写的烂软件将会给另一个人带来一份全职工作。(Jessica Gaston) 如果建筑工人像程序员写软件那样盖房子，那第一只飞来的啄木鸟就能毁掉人类文明。(Gerald Weinberg) 这世界最有可能毁灭的方式——大多数专家都同意——是次意外。这就是为什么会有我们，我们是计算机专家，我们创造意外。(Nathaniel Borenstein) 我们这个行业有个特别奇怪的现象：不仅我们不从失败里吸取教训，同时也不从成功中学习经验。 (Keith Braithwaite) 一种新技术一旦开始流行，你要么坐上压路机，要么成为铺路石。(Stewart Brand) 如果没能一次成功，那就叫它1.0版吧。(unknown) 所有的程序员都是编剧，所有的计算机都是烂演员。(Anonymous Hack Actor) 工作进度上越早落后，你就会有越充足的时间赶上。(Anonymous Scheduler) 当有这样的一种编程语言出现：它能让程序员用简单的英语编程，你将会发现，程序员都开始不会说英语。(Anonymous Linguist) 为什么我们没有时间把事情做对，却总有时间把事情做过头？(Anonymous) 傻瓜都能写出计算机能理解的程序。优秀的程序员写出的是人类能读懂的代码。 任何你写的代码，超过6个月不去看它，当你再看时，都像是别人写的。(Eagleson’s law) 编程/软件开发语录 按代码行数来评估软件开发的进度，就如同按重量来评估飞机建造的进度。(比尔-盖茨) 软件就像做爱。一次犯错，你需要用余下一生来维护支持。(Michael Sinz) 在水上行走和按需求文档开发软件都很容易——前提是它们都是冻结状态。(Edward V Berard) 最初90%的代码用去了最初90%的开发时间…余下10%的代码用去了另外90%的开发时间。(Tom Cargill) 注释代码很像清洁你的厕所——你不想干，但如果你做了，这绝对会给你和你的客人带来更愉悦的体验。(Ryan Campbell) 如今的编程是一场程序员和上帝的竞赛，程序员要开发出更大更好、傻瓜都会用到软件。而上帝在努力创造出更大更傻的傻瓜。目前为止，上帝是赢的。(Rick Cook) 软件设计最困难的部分…是阻挡新功能的引入。(Donald Norman) 为了理解递归，我们首先要理解的是递归。(Anonymous) 世上只有两类编程语言：那些拥有被人诟病的和那些没人用的。(Bjarne Stroustrup) The best thing about a boolean is even if you are wrong, you are only off by a bit. (Anonymous) 如果Java能实现真的垃圾回收，那大部分的程序都会在执行时删除自己。(Robert Swell) 理论上，理论和实践是没有差异的。但实践中，是有的。(Jan L. A. van de Snepscheut) 预备，开火，瞄准：这是最快的软件开发方法。预备，瞄准，瞄准，瞄准，瞄准：这是最慢的软件开发方法。(Anonymous) 编程是10%的科学，20%天份，和70%的让这天份符合科学。(Anonymous) 评估一个事情要比去理解你评估了什么容易。(Anonymous) 测评不会撒谎，但测评的人会。(Anonymous) 培养员工，即使他们有跳槽的风险。什么都不做而留他们在公司，这样风险更大。(Anonymous) 计算机科学的目标是做出一个东西，并且保证它至少能坚持到我们将它开发完成。(Anonymous) Java之于JavaScript如同Car之于Carpet。 (Chris Heilmann) 起初就把事情做对是完全没必要的。但最后要把事情做对是绝对必要的。(Andrew Hunt and David Thomas) 数组的起始索引应该从0开始还是从1开始？我的0.5的折中提议被他们未经认真考虑到拒绝了——我认为是这样的。(Stan Kelly-Bootle) 程序必须是为了给人看而写，给机器去执行只是附带任务。 (Abelson / Sussman) 编程可以很有趣，你可以用它做密码学研究，但两者绝对不能合二为一。(Kreitzberg and Shneiderman) 拷贝-粘贴是一种设计错误。(David Parnas) 计算机善于遵循指令，但不善于理解你的思维。(Donald Knuth) 软件纠错语录 删除的代码是没有bug的代码。(Jeff Sickel) 如果纠错是消除软件bug的过程，那编程一定是把它们放进去的过程。(Edsger Dijkstra) 代码纠错要比新编写代码困难一倍。因为，如果你写出了最聪明的代码，按此推算，你将没有更大的智慧来debug它。 想在自己的代码里找出一个错误是十分困难的。而当你认为你的代码没有错误时，那就更难了。(Steve McConnel) 软件bug语录 这不是个bug——这一个未注明的功能特征。(Anonymous) 没有需求或设计，编程就是一种将bug添加到一个空文本文件里的艺术。(Louis Srygley) 烂代码并不烂，只是被误解了。(Anonymous Code Behaviorist) 有两种方法能写出没有错误的程序；但只有第三种好用。(Alan J. Perlis) 小心上面代码中的bug；我只知道这些代码是正确的，但没有试过。(Donald Knuth) 软件产品/成品语录 软件能够复用前，它必须要可用。(Ralph Johnson) 软件通常在beta测试完成不久后发布。Beta在拉丁语中是“还不能用”的意思。(Anonymous) 最好的性能改进是将软件从不能用的状态变成可用。(J. Osterhout) 最廉价、最快速、最可信赖的组件是那些还未出现的组件。(Gordon Bell) I think Microsoft named .Net so it wouldn’t show up in a Unix directory listing. (Oktal) 软件和教堂非常相似——建成之后我们就在祈祷。(Sam Redwine) 除非最后一个用户死掉，软件是不会有完工的时候的。(Anonymous) 如今的大部分软件都非常像埃及金字塔，由成千上万的石块一个摞一个构成，没有结构上的集成，是由暴力强制和成千上万的奴隶完成。(Alan Kay) 文章转载自：外刊IT评论","categories":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}],"tags":[{"name":"幽默笑话","slug":"幽默笑话","permalink":"http://yoursite.com/tags/幽默笑话/"}],"keywords":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}]},{"title":"Selenium初探--Nodejs+Selenium环境搭建及基础用法","slug":"selenium","date":"2018-01-17T08:44:08.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/17/selenium/","link":"","permalink":"http://yoursite.com/2018/01/17/selenium/","excerpt":"","text":"前言Selenium多用于系统的自动化测试，但有时候也可以用来做一些类似外挂一样的东西，比如定时打开某个网站去做一些操作，在不久前的项目中由于需要定时（实际是我方系统检测到有用户充值时）去操作一个合作公司的网站完成一些操作（实际是打开网站登录管理员账号去完成充值操作，因为合作方不能提供充值接口）。在考虑了macaca,appium,selenim（甚至按键精灵😄 ）等工具后最终选择了使用Nodejs+Selenium的方式完成。一路探索和尝试后完成了功能，在此做下记录和总结。 环境搭建1.安装 Nodejs到Nodejs官方下载地址下载最新稳定版本Nodejs后安装。安装成功后在命令行模式使用以下命令查看是否成功。成功后会显示相应的版本信息。 node -v 2.项目初始化创建一个文件夹（用户存放项目文件）后命令行模式进入到该文件夹下执行命令： npm init 3.配置selenium运行环境在上一步相同的命令行下运行以下命令至其运行安装完成。 npm install selenium-webdriver –save 4.安装浏览器驱动 安装Chrome驱动 npm install chromedriver –save 安装Firefox驱动 npm install geckodriver –save 安装IE驱动 npm install iedriver –save 说明：出现安装驱动后运行脚本提示驱动不正常之类的问题时可自行下载驱动放到与脚本相同的目录下试试。驱动下载地址：http://www.seleniumhq.org/download/ 基本用法一.初始化初始化一个浏览器并打开一个网页，如下：12345var webdriver = require(&apos;selenium-webdriver&apos;);var driver = new webdriver.Builder() .forBrowser(&apos;ie&apos;) .build();driver.get(&apos;http://www.baidu.com&apos;); 二.常用方法1.元素定位 根据id定位 1driver.findElement(By.id(&apos;ID&apos;))；//类似于jquery的$(&quot;#id&quot;) 根据className定位 1driver.findElement(By.className(&apos;Class&apos;))；//类似于jquery的$(&quot;.class&quot;) 更多定位方式可参考：http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_By.html 2.设置元素的值1driver.findElement(By.id(&apos;ID&apos;)).sendKeys(&apos;value&apos;);//类似于jquery的$(&quot;.id&quot;).val(&quot;value&quot;); 3.清空元素的值1driver.findElement(By.id(&apos;id&apos;)).clear(); 4.单击按钮1driver.findElement(By.id(&apos;id&apos;)).click(); 5.元素等待有时对一些元素需要等待页面跳转或操作完成才会显示，如果操作耗时或者网络原因，如果该元素还没出现就进行操作可能会跑出异常，这是我们需要设置一些等待，等待该元素出现在页面上时才能进行操作：123var until = webdriver.until;driver.wait(until.elementLocated(By.id(&apos;id&apos;), 10000));... 6.程序睡眠睡眠功能解决的问题和元素等待类似，更推荐使用元素等待方法。1driver.sleep(500);//毫秒 7.执行JavaScript在网页上运行一段javascript,此方法在selenium的使用中非常有用，当有些时候某个元素是在难以获取时，可使用该方法直接触发该元素本身的操作，例如某个按钮点击后执行网页跳转，但是我们难以定位该元素时可以直接使用以下方式跳转：1driver.executeScript(&apos;location.href=&quot;/xx.html&quot; &apos;); 或者需要给元素设置值时可以使用：1driver.executeScript(&apos;document.getElementById(&quot;id&quot;).value=&quot;value&quot;&apos;);//$(&quot;#id&quot;).val(&quot;value&quot;); 8.执行JavaScript并获取返回值在网页上运行JavaScript还可返回值，以供我们自动运行程序调用做出一些判断，比如可以检查网页上的某个值大于100做某种操作，小于100做另外一种操作。12345678driver.executeScript(&apos;return $(&quot;#id&quot;).val()&apos;).then(function(obj)&#123; //obj即为返回值 if(obj&gt;100)&#123; //操作 &#125;else&#123; //其他操作 &#125;&#125;) 9.切换作用域（switchTo） 切换到iframe网页中常常会嵌入一些iframe，或者是标签页面或者是弹窗的形式。这是要操作iframe里面的元素前就需把当前的作用域切换到iframe，切换后在切换会主页面前所有的操作都是针对iframe，在iframe内的操作结束后需切换回主页面。 1driver.switchTo().frame(driver.findElement(By.id(&quot;iframe-id&quot;))); //iframe-id为iframe元素的id 切换到弹出框有时候一些网页会弹出一些操作提示，提示框会堵塞整个任务的执行，需将其关闭(只针对原生的js弹出框)。 1234567driver.switchTo().alert().then(function(alert) &#123; //检测到弹出框时执行 //关闭alert return alert.dismiss();&#125;,function()&#123; //没有检测到弹出框时执行&#125;); 切换回主页面 1driver.switchTo().defaultContent(); 10.网页最大化（全屏）1driver.manage().window().maximize(); 11.网页截图(定位)网页截图看上去很简单，就一行代码如下：1driver.takeScreenshot()； 截图后的结果为base64格式，可自行处理。类似这样：123driver.takeScreenshot().then(function(d)&#123; //此处d即为截图结果base64字符串，可在此自行处理&#125;); 但是往往在实际应用中可能我们不需要一整个网页图片，我们值需要某部分的图片，这时候就需要换种方式了。在网上找到了一些信息（已不记得出处）后做了整理和亲测后记录如下：123456789101112131415161718driver.findElement(By.className(&apos;yanzheng&apos;)).then(function(obj)&#123; obj.getSize().then(function(size)&#123; obj.getLocation().then(function(loc)&#123; driver.takeScreenshot().then(function(d)&#123; var data=&#123; d:d, width:size.width, height:size.height, x:loc.x, y:loc.y &#125;; //此处省略以下两步 //1.提交data信息到服务器处理图片 //2.先根据d获取整张图片信息，再根据需要截取的元素的其实位置x,y以及长宽width,height截取相应的图片 &#125;) &#125; &#125;&#125;) 12.退出程序（关闭网页）1driver.quit(); 更多详细文档可参考官方文档：http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"Selenium","slug":"Selenium","permalink":"http://yoursite.com/tags/Selenium/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"原生js+css 实现手机滑动显示隐藏按钮功能","slug":"slide","date":"2018-01-17T03:37:59.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/17/slide/","link":"","permalink":"http://yoursite.com/2018/01/17/slide/","excerpt":"","text":"前言：最近做项目的过程中遇到需要在列表上可以有“修改”和“删除”按钮的需求，但由于在移动端，手机界面较小，在显示了其他必须内容后再直接显示两个按钮的话会导致界面很臃肿，难以适应各个机型，所以考虑采用模拟一些手机APP的做法，首先隐藏按钮，在用户按住某条数据左滑或者右滑时显示按钮。由于本人前端水平也很一般，只能各种百度搜罗文档之后终于实现了该功能，在此做下记录和总结，方便自己以后查询，同时供同样需要的朋友参考。 实例只实现了左滑显示，有右滑需求可仿照 效果预览： 1.HTML代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt; &lt;title&gt;侧滑&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;/&gt; &lt;script type=&apos;text/javascript&apos; src=&apos;index.js&apos; charset=&apos;utf-8&apos;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&apos;box&apos;&gt; &lt;div class=&quot;swipe-container&quot; &gt; &lt;div class=&quot;item-container&quot;&gt; &lt;img src=&quot;resource/logo.jpg&quot;/&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;title&quot;&gt;这里是标题&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;这里是简单描述 &lt;span&gt;2018-01-17&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;allow-right&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;action action-edit&quot;&gt;编辑&lt;/div&gt; &lt;div class=&quot;action action-delete&quot;&gt;删除&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;swipe-container&quot;&gt; &lt;div class=&quot;item-container&quot;&gt; &lt;img src=&quot;resource/logo.jpg&quot;/&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;title&quot;&gt;这里是标题&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;这里是简单描述 &lt;span&gt;2018-01-17&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;allow-right&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;action action-edit&quot;&gt;编辑&lt;/div&gt; &lt;div class=&quot;action action-delete&quot;&gt;删除&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;swipe-container&quot;&gt; &lt;div class=&quot;item-container&quot;&gt; &lt;img src=&quot;resource/logo.jpg&quot;/&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;title&quot;&gt;这里是标题&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;这里是简单描述 &lt;span&gt;2018-01-17&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;allow-right&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;action action-edit&quot;&gt;编辑&lt;/div&gt; &lt;div class=&quot;action action-delete&quot;&gt;删除&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 2.用到的一些CSS12345678910111213141516171819202122232425body&#123;background-color: #eee;margin:0;overflow-y:scroll;&#125;/*必须overflow-x:hidden 否则网页会整体出现横向滚动*/.box&#123;overflow-x:hidden;width:100%&#125;/*内容宽度占据整个页面宽度 使按钮被隐藏*/.item-container&#123;width:100%;padding:0.5rem;background-color: #fff;display: flex;align-items: center;height: 3.5rem&#125;.item-container img&#123;height: 3.5rem;width: 3.5rem&#125;.content&#123;flex:1;margin: 0 1rem&#125;.title&#123;font-size: 1rem;color: #000;margin-bottom:0.5rem&#125;.desc&#123;font-size: 0.9rem;color: #999&#125;.desc span&#123;float: right&#125;.allow-right&#123;width:2rem;height: 3.5rem;background:transparent url(resource/allow_right.png) no-repeat;background-size:1.5rem 1.5rem;background-position: center&#125;.action-delete&#123;background:#C95454&#125;.action-edit&#123;background:#00BCD4&#125;/*-webkit-transition:all 0.3s linear;transition:all 0.3s linear;使浏览器出现滑动效果width: 140%;内容占100% 两个按钮各占20% ，根据按钮数量和宽度调整*/.swipe-container&#123; margin-bottom:0.5rem;width: 140%;display: flex;-webkit-transition:all 0.3s linear;transition:all 0.3s linear;&#125;/*width:20%; 和swipe-container width: 140%;相对应*/.swipe-container .action&#123;width:20%;text-align:center;color:#fff;padding:0.5rem 0;line-height: 3.5rem;&#125;/*使元素向左滑动之后显示被隐藏的按钮 此处不知道原理 写40%不行 大概是因为此处的宽度是以swipe-container的总宽度为100%来计算，按钮的宽度20%则时以网页的宽度为100%来计算的，即 ：100*(20%)=140*(14.25%)根据按钮数量和宽度调整*/.swipeleft&#123;transform:translateX(-28.5%);-webkit-transform:translateX(-28.5%);&#125; 3.JS实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283 window.onload=function()&#123; setSlide(); var elems=document.getElementsByClassName(&quot;action-delete&quot;); for(var i=0;i&lt;elems.length;i++)&#123; elems[i].addEventListener(&quot;click&quot;, function()&#123; var r=confirm(&quot;确定要删除该记录吗?&quot;) if (r)&#123; alert(&quot;呵呵呵&quot;); &#125;else&#123; alert(&quot;哈哈哈&quot;); &#125; &#125;); &#125; &#125;; function setSlide() &#123; //侧滑显示删除按钮 var expansion = null; //是否存在展开的list var container = document.querySelectorAll(&quot;.swipe-container&quot;); for (var i = 0; i &lt; container.length; i++) &#123; var x, y, X, Y, swipeX, swipeY; container[i].addEventListener(&apos;touchstart&apos;, function (event) &#123; x = event.changedTouches[0].pageX; y = event.changedTouches[0].pageY; swipeX = true; swipeY = true; if (expansion) &#123; //判断是否展开 //如果展开则收起 以下代码取消注释后则滑动开始立即收起 注释后则向右滑动一定距离后收起隐藏按钮 //方法一. //removeClass(this,&quot;swipeleft&quot;); //方法二 需引入jquery //$(this).removeClass(&quot;swipeleft&quot;); &#125; &#125;); container[i].addEventListener(&apos;touchmove&apos;, function (event) &#123; X = event.changedTouches[0].pageX; Y = event.changedTouches[0].pageY; // 左右滑动 if (swipeX &amp;&amp; Math.abs(X - x) - Math.abs(Y - y) &gt; 0) &#123; // 阻止事件冒泡 event.stopPropagation(); if (X - x &gt; 10) &#123; //右滑收起 event.preventDefault(); removeClass(this,&quot;swipeleft&quot;); //$(this).removeClass(&quot;swipeleft&quot;); &#125; if (x - X &gt; 10) &#123; //左滑展开 event.preventDefault(); //$(this).addClass(&quot;swipeleft&quot;); addClass(this,&quot;swipeleft&quot;); expansion = this; &#125; swipeY = false; &#125; // 上下滑动 if (swipeY &amp;&amp; Math.abs(X - x) - Math.abs(Y - y) &lt; 0) &#123; swipeX = false; &#125; &#125;); &#125;&#125;function hasClass(elem, cls) &#123; cls = cls || &apos;&apos;; if (cls.replace(/\\s/g, &apos;&apos;).length == 0) return false; return new RegExp(&apos; &apos; + cls + &apos; &apos;).test(&apos; &apos; + elem.className + &apos; &apos;); &#125; function addClass(ele, cls) &#123; if (!hasClass(ele, cls)) &#123; ele.className = ele.className == &apos;&apos; ? cls : ele.className + &apos; &apos; + cls; &#125; &#125; function removeClass(ele, cls) &#123; if (hasClass(ele, cls)) &#123; var newClass = &apos; &apos; + ele.className.replace(/[\\t\\r\\n]/g, &apos;&apos;) + &apos; &apos;; while (newClass.indexOf(&apos; &apos; + cls + &apos; &apos;) &gt;= 0) &#123; newClass = newClass.replace(&apos; &apos; + cls + &apos; &apos;, &apos; &apos;); &#125; ele.className = newClass.replace(/^\\s+|\\s+$/g, &apos;&apos;); &#125; &#125; 4.在线效果预览预览地址：https://wangheng3751.github.io/assets/my-examples/sideslipping/index.html 或扫一扫下方二维码预览 5.源码地址Github访问地址 :https://github.com/wangheng3751/useful-example.front-end/tree/master/examples/sideslipping","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"html+css+js 实现拍照预览上传图片功能","slug":"take-picture","date":"2018-01-12T06:36:19.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/12/take-picture/","link":"","permalink":"http://yoursite.com/2018/01/12/take-picture/","excerpt":"","text":"前言：我们在做网页时经常会需要有上传图片的需求，可能是选择图片或者拍照上传，如果简单的使用 input type=”file” 这种方式虽然也能实现功能，但用户体验上可能会差了一些，所以本文记录了使用css+js实现图片选中后的预览及压缩上传功能，部分带来来源于网络，此处做了记录整理。 效果预览： 1.创建index.html12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt; &lt;title&gt;拍照上传&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;/&gt; &lt;script type=&apos;text/javascript&apos; src=&apos;index.js&apos; charset=&apos;utf-8&apos;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;mainForm&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;label&quot;&gt;身份证&lt;/div&gt; &lt;div class=&quot;img-area&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;input type=&quot;file&quot; id=&apos;id-face&apos; name=&apos;face&apos; accept=&quot;image/*&quot; /&gt; &lt;div id=&apos;face-empty-result&apos;&gt; &lt;img style=&apos;width:4rem&apos; src=&quot;https://github.com/wangheng3751/my-resources/blob/master/images/camera.png?raw=true&quot; alt=&quot;&quot;&gt; &lt;p&gt;身份证正面照&lt;/p&gt; &lt;/div&gt; &lt;img style=&apos;width: 100%&apos; id=&apos;face-result&apos;/&gt; &lt;/div&gt; &lt;div class=&quot;container&quot; style=&apos;margin-top:0.5rem;&apos;&gt; &lt;input type=&quot;file&quot; id=&apos;id-back&apos; name=&apos;back&apos; accept=&quot;image/*&quot; /&gt; &lt;div id=&apos;back-empty-result&apos;&gt; &lt;img style=&apos;width:4rem&apos; src=&quot;https://github.com/wangheng3751/my-resources/blob/master/images/camera.png?raw=true&quot; alt=&quot;&quot;&gt; &lt;p&gt;身份证反面照&lt;/p&gt; &lt;/div&gt; &lt;img style=&apos;width: 100%&apos; id=&apos;back-result&apos;/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;btn&quot;&gt; 提交 &lt;/div&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 2.创建index.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748body&#123; margin: 0&#125;.content&#123; padding:0.5rem; display: flex; align-items: center; border-bottom: 1px #999 solid&#125;.label&#123; width:5rem;&#125;.img-area&#123; flex:1&#125;.container&#123; background-color:#e7e7e7; position: relative;&#125;.container div&#123; text-align: center; padding:0.5rem 0&#125;.container input&#123; opacity:0; filter:alpha(opacity=0); height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 9;&#125;.container p&#123; font-size: 0.9rem; color:#999&#125;.btn&#123; background-color: #4363ab; color: #fff; text-align: center; padding: 0.5rem 1rem; width:80%; border-radius: 0.2rem; margin: 2rem auto; font-weight: 600; font-size: 1.2rem&#125; 3.创建index.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182window.onload=function()&#123; document.getElementById(&quot;id-face&quot;).addEventListener(&quot;change&quot;, function()&#123; onFileChange(this,&quot;face-result&quot;,&quot;face-empty-result&quot;) &#125;); document.getElementById(&quot;id-back&quot;).addEventListener(&quot;change&quot;, function()&#123; onFileChange(this,&quot;back-result&quot;,&quot;back-empty-result&quot;) &#125;); document.getElementsByClassName(&quot;btn&quot;)[0].addEventListener(&quot;click&quot;, function()&#123; submit(); &#125;);&#125;;/** * 选中图片时的处理 * @param &#123;*&#125; fileObj input file元素 * @param &#123;*&#125; el //选中后用于显示图片的元素ID * @param &#123;*&#125; btnel //未选中图片时显示的按钮区域ID */function onFileChange(fileObj,el,btnel)&#123; var windowURL = window.URL || window.webkitURL; var dataURL; var imgObj = document.getElementById(el); document.getElementById(btnel).style.display=&quot;none&quot;; imgObj.style.display=&quot;block&quot;; if (fileObj &amp;&amp; fileObj.files &amp;&amp; fileObj.files[0]) &#123; dataURL = windowURL.createObjectURL(fileObj.files[0]); imgObj.src=dataURL; &#125; else &#123; dataURL = fileObj.value; imgObj.style.filter = &quot;progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)&quot;; imgObj.filters.item(&quot;DXImageTransform.Microsoft.AlphaImageLoader&quot;).src = dataURL; &#125;&#125;/** * 将图片压缩后返回base64格式的数据 * @param &#123;*&#125; image img元素 * @param &#123;*&#125; width 压缩后图片宽度 * @param &#123;*&#125; height 压缩后图片高度 * @param &#123;*&#125; qua //图片质量1-100 */function compressImageTobase64(image,width,height,qua)&#123; var quality = qua ? qua / 100 : 0.8; var canvas = document.createElement(&quot;canvas&quot;), ctx = canvas.getContext(&apos;2d&apos;); var w = image.naturalWidth, h = image.naturalHeight; canvas.width = width||w; canvas.height = height||h; ctx.drawImage(image, 0, 0, w, h, 0, 0, width||w, height||h); var data = canvas.toDataURL(&quot;image/jpeg&quot;, quality); return data;&#125;//提交function submit()&#123; //1、form提交 //document.getElementById(&quot;mainForm&quot;).submit(); //2、压缩后ajax提交 var face_data=compressImageTobase64(document.getElementById(&quot;face-result&quot;),200,100,90); var back_data=compressImageTobase64(document.getElementById(&quot;back-result&quot;),200,100,90); var formData = new FormData(); formData.append(&quot;face&quot;,face_data); formData.append(&quot;back&quot;,back_data); //需引入jQuery $.ajax(&#123; url:&quot;/地址&quot;, type: &apos;POST&apos;, cache: false, data: formData, timeout:180000, processData: false, contentType: false, success:function(r)&#123; &#125;, error:function(r)&#123; &#125; &#125;);&#125; 扫一扫预览效果 源码获取：Github地址","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"React-Native 消息推送--Android混合推送","slug":"mixpush","date":"2018-01-09T06:10:00.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/09/mixpush/","link":"","permalink":"http://yoursite.com/2018/01/09/mixpush/","excerpt":"","text":"背景由于使用任何一种Android推送都很难在APP进程被杀死后收到推送，只有集成各厂商提供的系统级别推送才能完成此任务,故考虑小米、华为、魅族手机使用官方推送，其他手机使用个推推送！ 项目GitHub地址： https://github.com/wangheng3751/react-native-mixpush 安装：npm install --save react-native-mixpush-android 配置使用：1、配置android/settings.gradle123...include &apos;:react-native-mixpush-android&apos;project(&apos;:react-native-mixpush-android&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-mixpush-android&apos;) 2、配置app/build.gradle1234567891011manifestPlaceholders = [ PACKAGE_NAME : &quot;你的包名&quot;, //测试环境 GETUI_APP_ID : &quot;个推APPID&quot;, GETUI_APP_KEY : &quot;个推APPKEY&quot;, GETUI_APP_SECRET : &quot;个推APPSECRE&quot;]dependencies &#123; ... compile project(&quot;:react-native-mixpush-android&quot;)&#125; 3、配置android/build.gradle12345678910111213allprojects &#123; repositories &#123; mavenLocal() jcenter() ... //个推 maven &#123; url &quot;http://mvn.gt.igexin.com/nexus/content/repositories/releases/&quot; &#125; //华为推送 maven &#123;url &apos;http://developer.huawei.com/repo/&apos;&#125; &#125; &#125; 4、配置AndroidManifest.xmlmanifest节点下添加：12345678910111213141516&lt;!--小米推送--&gt; &lt;permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.MIPUSH_RECEIVE&quot; android:protectionLevel=&quot;signature&quot; /&gt; &lt;uses-permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.MIPUSH_RECEIVE&quot; /&gt; &lt;!--小米推送END--&gt; &lt;!--魅族推送--&gt; &lt;!-- 兼容flyme5.0以下版本，魅族内部集成pushSDK必填，不然无法收到消息--&gt; &lt;uses-permission android:name=&quot;com.meizu.flyme.push.permission.RECEIVE&quot;&gt;&lt;/uses-permission&gt; &lt;permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.push.permission.MESSAGE&quot; android:protectionLevel=&quot;signature&quot;/&gt; &lt;uses-permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.push.permission.MESSAGE&quot;&gt;&lt;/uses-permission&gt; &lt;!-- 兼容flyme3.0配置权限--&gt; &lt;uses-permission android:name=&quot;com.meizu.c2dm.permission.RECEIVE&quot; /&gt; &lt;permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.C2D_MESSAGE&quot; android:protectionLevel=&quot;signature&quot;&gt;&lt;/permission&gt; &lt;uses-permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.C2D_MESSAGE&quot;/&gt; &lt;!--魅族推送END--&gt; application节点下添加：1234567&lt;!--华为推送配置begin--&gt;&lt;meta-data android:name=&quot;com.huawei.hms.client.appid&quot; android:value=&quot;你的华为推送APPID&quot;/&gt;&lt;provider android:name=&quot;com.huawei.hms.update.provider.UpdateProvider&quot; android:authorities=&quot;$&#123;PACKAGE_NAME&#125;.hms.update.provider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot; &gt;&lt;/provider&gt; 5、注册推送MainApplication中引用组件：12345678910import com.duanglink.rnmixpush.MixPushReactPackage;protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), ... new MixPushReactPackage() ); &#125; &#125;; MainActivity中注册推送：1234567891011121314151617import com.duanglink.huaweipush.HuaweiPushActivity; //特别注意：此处继承HuaweiPushActivity public class MainActivity extends HuaweiPushActivity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; if(savedInstanceState==null)&#123; savedInstanceState=new Bundle(); &#125; savedInstanceState.putString(&quot;meizuAppId&quot;,&quot;魅族AppId&quot;); savedInstanceState.putString(&quot;meizuAppKey&quot;,&quot;魅族AppKey&quot;); savedInstanceState.putString(&quot;xiaomiAppId&quot;,&quot;小米AppId&quot;); savedInstanceState.putString(&quot;xiaomiAppKey&quot;,&quot;小米AppKey&quot;); super.onCreate(savedInstanceState); &#125; ... &#125; 6、React-Native客户端接收事件：1234567var &#123; NativeAppEventEmitter &#125; = require(&apos;react-native&apos;);NativeAppEventEmitter.addListener( &apos;receiveRemoteNotification&apos;, (notification) =&gt; &#123; Alert.alert(&apos;消息通知&apos;,JSON.stringify(notification)); &#125;); 7、React-Native客户端方法说明：123456import MixPush from &apos;react-native-mixpush-android&apos;;- MixPush.setAlias(alias); //设置别名- MixPush.unsetAlias(alias); //取消设置别名- MixPush.setTags(tags); //设置用户标签- MixPush.unsetTags(tags); //取消设置用户标签- MixPush.getClientId(); //获取客户端ID 以上方法均不支持华为手机 说明：getClientId获取到的ID为用户在推送平台的唯一标识（小米：regId，魅族：pushId;个推：clientId），用于定向推送; 此外,所有推送平台在APP推送注册成功后会往客户端发送一次注册成功事件(包含华为:deviceToken)，事件名为:”receiveClientId”,并携带clientId,可使用该事件与getClientId方法配合使用达到获取clientId的目的。 实例： 123456789101112 //主动获取&lt;br&gt; MixPush.getClientId((cid)=&gt;&#123; alert(&quot;cid:&quot;+cid);//自行处理cid代码&#125;); //监听事件&lt;br&gt; NativeAppEventEmitter.addListener( &apos;receiveClientId&apos;, (cid) =&gt; &#123; alert(&quot;cid:&quot;+cid);//自行处理cid代码 &#125;); 说明后台推送使用各平台后台管理系统或自行集成SDK。 项目QQ交流群：516032289","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"程序员专用经典语录—看完笑一阵可以，千万不要死循环哦！","slug":"joke-coder","date":"2018-01-06T05:11:41.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/06/joke-coder/","link":"","permalink":"http://yoursite.com/2018/01/06/joke-coder/","excerpt":"","text":"十年生死两茫茫，写程序，到天亮。千行代码，Bug何处藏。纵使上线又怎样，朝令改，夕断肠。领导每天新想法，天天改，日日忙。相顾无言，惟有泪千行。每晚灯火阑珊处，夜难寐，又加班。 老婆给当程序员的老公打电话：“下班顺路买三个包子带回来，如果看到卖西瓜的，买一个。”当晚，程序员老公手捧一个包子进了家门。。。老婆怒道：“你怎么就买了一个包子？！”老公答曰：“因为看到了卖西瓜的。” 程序员爱情观：爱情就是死循环，一旦执行就陷进去了；爱上一个人，就是内存泄漏–你永远释放不了；真正爱上一个人的时候，那就是常量限定，永远不会改变；女朋友就是私有变量，只有我这个类才能调用；情人就是指针用的时候一定要注意，要不然就带来巨大的灾难。 某程序员对书法十分感兴趣，退休后决定在这方面有所建树。于是花重金购买了上等的文房四宝。一日，饭后突生雅兴，一番磨墨拟纸，并点上了上好的檀香，颇有王羲之风范，又具颜真卿气势，定神片刻，泼墨挥毫，郑重地写下一行字：hello world. 一个程序员在海滨游泳时溺水身亡。当时海滩上有许多救生员，救生员们只听见有人大声喊“F1!”“F1!”，谁都不知道“F1”究竟是什么意思。 你能让一个程序员一天到晚呆在淋浴房里吗？给他一瓶洗发香波，上面写着：for(;;){ 涂抹香波; 温水冲洗;} 打，打，打劫一女黑夜遇抢劫，颤抖曰：“大哥，我是搞java的，两个月没发工资了，还刚被裁员，你看报道就知道了，真的没有钱… …”劫匪听后竟然痛哭流涕，“妹子，同行，俺原来是做C++的，金融危机闹得做劫匪也不踏实，你拿好工牌，后面那帮抢劫是做.NET的，你放心，我们绝不抢自己人。”“对了，边上那条路不要走，那边是搞PHP的… …” 有一个物理学家，工程师和一个程序员驾驶着一辆汽车行驶在阿尔卑斯山脉上，在下山的时候，忽然，汽车的刹车失灵了，汽车无法控制地向下冲去，眼看前面就是一个悬崖峭壁，但是很幸运的是在这个悬崖的前面有一些小树让他们的汽车停了下来，而没有掉下山去。三个惊魂未定地从车里爬了出来。物理学家说，“我觉得我们应该建立一个模型来模拟在下山过程中刹车片在高温情况下失灵的情形”。工程师说，“我在车的后备厢来有个扳手，要不我们把车拆开看看到底是什么原因”。程序员说，“为什么我们不找个相同的车再来一次以重现这个问题呢？” 有一个小伙子在一个办公大楼的门口抽着烟，一个妇女路过他身边，并对他说，“你知道不知道这个东西会危害你的健康？我是说，你有没有注意到香烟盒上的那个警告（Warning）？”小伙子说，“没事儿，我是一个程序员”。那妇女说，“这又怎样？”程序员说，“我们从来不关心Warning，只关心Error” 两字符串走进一个酒吧坐下，酒保过来，“两位来点什么？”第一个字符串说，“我要一杯湿啤 fulk boorg jdk^CjfdLk jk3s d#f67howe%^U r89nvy~~owmc63^Dz x.xvcu。”“对不起，”第二个字符串对酒保说，“我这哥们没有\\0结尾。 为API生，为框架死，为debug奋斗一辈子，吃符号亏，上大小写的当，最后死在需求上 程序员眼中的女人有的女人就像Windows 虽然很优秀，但是安全隐患太大。有的女人就像UNIX 她条件很好，然而不是谁都能玩的起。有的女人就像C# 长的很漂亮，但是家务活不行。有的女人就像C++,她会默默的为你做很多的事情。有的女人就像JAVA,只需一点付出她就会为你到处服务。有的女人就像JAVA script，虽然对她处处小心但最终还是没有结果。有的女人就像汇编 虽然很麻烦，但是有的时候还得求它。 一百万只猴子，给他们一百万个键盘，其中的一个会写出Java程序，其它的写的都是Perl程序。 十个顶尖软件工程师参加培训管理人员的课程。老师提出了这样一个问题：“假如你供职的公司是为航空电子设备提供软件的。有一天你乘飞机出差，当你上了飞机后你发现一个牌子上写着这个飞机用的是你的团队开发的Beta版软件，你会下飞机吗？”九个软件工程师举了手。老师看着第十个问道：“你为什么愿意留在飞机上？”这人回答说：“如果是我的团队写的这个软件，飞机根本无法起飞，根本谈不上坠毁。” 这个笑话大概来自70年代的米国：一个新手在试着修复一台坏了的LISP机器，他的方法就是反复关上电源然后打开。专家看到之后，严厉地批评说：“你这样是没用的，你必须要明白出错的深层次原因。”专家关掉电源，然后打开。运行正常了。 为什么程序员总是分不清万圣节和圣诞节？因为 Oct 31 == Dec 25。 小沈阳版程序员~~~程序员其实可痛苦的了……需求一做一改，一个月就过去了；嚎~需求再一改一调，一季度就过去了；嚎~程序员最痛苦的事儿是啥，知道不？就是，程序没做完，需求又改了；程序员最最痛苦的事儿是啥，知道不？ 就是，系统好不容易做完了，方案全改了；程序员最最最痛苦的事儿是啥，知道不？ 就是，系统做完了，狗日的客户跑了；程序员最最最最最痛苦的事儿是啥，知道不？ 就是，狗日的客户又回来了,程序给删没了！ 这个世界上只有10种人：懂得二进制的和不懂得二进制的。 Borland说我很有前途，Sun笑了；Sun说我很有钱，IBM笑了；IBM说我很专业，Sybase笑了；Sybase说我数据库很牛，Oracle笑了；Oracle说我是开放的，Linux笑了；Linux说我要打败Unix，微软笑了；微软说我的系统很稳定，我们都笑了。 程序员的祝福祝大家在以后的日子里. 男生象Oracle般健壮; 女生象win7般漂亮; 桃花运象IE中毒般频繁; 钱包如Gmail容量般壮大, 升职速度赶上微软打补丁 ， 追女朋友像木马一样猖獗， 生活像重装电脑后一样幸福， 写程序敲代码和聊天一样有**。 一个合格的程序员是不会写出 诸如 “摧毁地球” 这样的程序的，他们会写一个函数叫 “摧毁行星”而把地球当一个参数传进去。 【 程序猿的三重境界】第一重：无尽bug常作客，困闷调试伴不眠。第二重：千行代码过，bug不沾身。第三重：编码间，bug灰飞烟灭。 四个2B青年掐架。A：你丫等着，我爹是敏感词！B：操你大爷！你丫牛逼神马，我爹在百度索根本无法显示！！C： 我爹404 not found！！！D：我爹 Connection Reset ！！！！ 天冷了，办公室的门上出现了一张告示，赫然写着，“不关门，有BUG”，然后就见每个出去的程序员，非常虔诚的把门关上了。 程序员找不到对象，一般有三种情况：1、 C# JAVA都有对象，但是经常找不到对象。2、ASM C直接没有对象。3、javascript都是伪对象，最多算暧昧。但C++日子一直都好过，因为C++是多继承，富二代呀！！！ 汇编，C和C++是好朋友，每天一起吃饭。可是前天晚上C++一个人去吃饭了。问他怎么了，他说“汇编和C没有对象，他们去过节了。。。 栈和队列的区别是啥？ 吃多了拉就是队列；吃多了吐就是栈 CSDN社区网友on1y_1onely留言：“C确实不适合做应用层，C有C的地盘。”网友zbdbao回复：“就是传说中的C盘么。”当时我就笑喷了…… 一个IT经理走进一家拉面馆说：“你们需要客户端吗？” 老板说：“面一般是伙计端，忙的时候才需要客户端。 一同学问我，软件外包是什么。解释了几句还没明白，遂想了一下：包工头知道吧？顿悟！ 正在码代码ing，医院回来的同事一脸的苦逼样子，问他怎么了？他回答：得了类风湿性关节炎了，我怕会遗传给下一代啊。我一脸的问号：谁说类风湿性关节炎能遗传的？丫一脸诧异：类不是继承的吗？ 世界上最遥远的距离不是生与死，而是你亲手制造的BUG就在你眼前，你却怎么都找不到她。。。 真的勇士，敢于直面惨淡的warning、敢于正视淋漓的error。 成功chroot过很多系统，却从未成功chroot过妹子的心。 某小偷潜入某IT公司欲行窃，没想到始终有人，他只好等啊等啊等，结果始终有一大拨人在加班。过了一个月，小偷终于逮到机会溜出来，同伙问：去哪了？小偷：在IT公司呆了一个月。同伙：收获不错吧？小偷苦笑：别TM提了，三十个大夜下来，我现在已经学会写程序了。 继承，是幸福的延续；重载，是幸福的重生。 一同事最近bug特别多，假装关切问他有多少个bug，他回答：10。过几日，再问，他回答：10。我：“这么多天过去了，怎么一点变化都没有？”，他：”哪里没有变化啊，以前是十进制，现在变成十六进制。 假如生活欺骗了你，找50个程序员问问为什么编程；假如生活让你想死，找50个程序员问问BUG改完了没有；假如你觉得生活拮据，找50个程序员问问工资涨了没有；假如你觉得活着无聊，找50个程序员问问他们一天都干了什么！ 经考证，C语言是女的…原因如下：1.无论你让她干什么，她绝对不可能自己找到方法。2.总是用复杂的方法解决简单的问题。3.不可能自主认识到本身错误。4.浪费时间是十分正常的事情。5.无论跟她说什么，都得用她能理解的方式做充分说明。6.只要你有一点错，她一定可以挑出来。7.反正，是你的错。 必备技能：去得了公司，回得了厨房；不羡慕好车，不想买新房；不惊动腾讯，不激怒同行；写得了代码，查得出异常；做得出产品，看得准市场；接触过VC，见识过投行。 如果你的朋友最近没和你联系，要理解！只有三种可能：第一，他死了；第二，他改行当程序猿了；第三，需求又改了！ 某日和同学聊起对象问题，我答道：哥最不缺的就是对象了，要知道哥是程序员，每天不知道要new多少个对象出来，而且想要啥类型就有啥类型。如果你想要，哥给你来个for循环嵌套，new上她千个百个 做为一名程序员，我每次看到工资单的时候，都会想：那些数字为神马不是16进制。 一个程序出错信息： Keyboard not found … press F1 to continue 大家喝的是啤酒，这时你入座了。你给自己倒了杯可乐，这叫低配置。你给自已倒了杯啤酒，这叫标准配置。你给自己倒了杯茶水，这茶的颜色还跟啤酒一样，这叫木马。你给自己倒了杯可乐，还滴了几滴醋，不仅颜色跟啤酒一样，而且不冒热气还有泡泡，这叫超级木马。你的同事给你倒了杯白酒，这叫推荐配置。菜过三巡，你就不跟他们客气了。你向对面的人敬酒，这叫p2p。你向对面的人敬酒，他回敬你，你又再敬他……，这叫tcp。你向一桌人挨个敬酒，这叫令牌环。你说只要是兄弟就干了这杯，这叫广播。有一个人过来向这桌敬酒，你说不行你先过了我这关，这叫防火墙。你的小弟们过来敬你酒，这叫一对多。你是boss，所有人过来敬你酒，这叫服务器。酒是一样的，可是喝酒的人是不同的。你越喝脸越红，这叫频繁分配释放资源。你越喝脸越白，这叫资源不释放。你已经醉了，却说我还能喝，叫做资源额度不足。你明明能喝，却说我已经醉了，叫做资源保留。喝酒喝到最后的结果都一样你突然跑向厕所，这叫捕获异常。你在厕所吐了，反而觉得状态不错，这叫清空内存。你在台面上吐了，觉得很惭愧，这叫程序异常。你在boss面前吐了，觉得很害怕，这叫系统崩溃。你吐到了boss身上，只能索性晕倒了，这叫硬件休克。 与女友分手两月有余，精神萎靡，面带菜色。家人介绍一女孩，昨日与其相亲。女孩果然漂亮，一向吝啬的我决定破例请她吃晚饭。选了一个蛮贵的西餐厅，点了比较贵的菜。女孩眉开眼笑，与我谈得很投机。聊着聊着，她说：“我给你讲个笑话吧。”“ok” “一只螳螂要给一只雌蝴蝶介绍对象，见面时发现对方是只雄蜘蛛。见面后螳螂问蝴蝶‘如何？’，‘他长的太难看了’，‘别看人家长的丑，人家还有网站呢’。”“呵呵………”我笑。忽然她问：“你有网站吗？” 系统程序员：1、 头皮经常发麻，在看见一个蓝色屏幕的时候比较明显，在屏幕上什幺都看不见的时候尤其明显；2、 乘电梯的时候总担心死机，并且在墙上找reset键；3、 指甲特别长，因为按F7到F12比较省力；4、 只要手里有东西，就不停地按，以为是Alt-F、S；5、 机箱从来不上盖子，以便判断硬盘是否在转；6、 经常莫名其妙地跟踪别人，手里不停按F10；7、 所有的接口都插上了硬盘，因此觉得26个字母不够；8、 一有空就念叨“下辈子不做程序员了”；9、 总是觉得9号以后是a号；10、 不怕病毒，但是很害怕自己的程序； 文章转载自 续写经典 :http://blog.csdn.net/qy1387/article/details/7957394","categories":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}],"tags":[{"name":"幽默笑话","slug":"幽默笑话","permalink":"http://yoursite.com/tags/幽默笑话/"}],"keywords":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}]},{"title":"React-Native 自定义Android原生组件--弹出提示框","slug":"react-native-component","date":"2018-01-02T06:10:00.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/02/react-native-component/","link":"","permalink":"http://yoursite.com/2018/01/02/react-native-component/","excerpt":"","text":"特别说明：本文仅适合未接触过或不熟悉Android原生开发的React-Native新手开发者！ 背景：使用React-Native开发Android APP时，虽然React-Native已经自带弹出提示框组件Alert，但由于各大手机厂商系统风格各异，在使用React-Native自带的弹出提示组件时也风格不一，并且大部分机型的弹出框样式比较难看，或者和APP的整体风格设计不协调，当然也可以使用Modal来实现弹出框，但是又得在所有需要的View添加Modal相应标签，较为繁琐，所以本文介绍一个简单的自定义弹出框的基本步骤。 效果预览： 一、设计布局文件弹出框多为提示框（alert），确认框（confirm）本实例展示一个简单的确认框（即包含“确认”和“取消”按钮）。具体的文字，颜色，背景色等按需修改为和UI设计风格较为统一的即可（可在Android Studio 中可视化设计）！ &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:background=&quot;#fff&quot; android:paddingBottom=&quot;15dp&quot;&gt; &lt;TextView android:id=&quot;@+id/title&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;#fff&quot; android:gravity=&quot;center&quot; android:padding=&quot;5dp&quot; android:text=&quot;温馨提示&quot; android:textSize=&quot;16sp&quot; android:textColor=&quot;#f18518&quot; /&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0.5dp&quot; android:background=&quot;#f18518&quot;&gt; &lt;/View&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textAppearance=&quot;?android:attr/textAppearanceSmall&quot; android:text=&quot;您的提示信息，后期从js端传入！&quot; android:id=&quot;@+id/text_msg&quot; android:textSize=&quot;15sp&quot; android:textColor=&quot;#000&quot; android:layout_gravity=&quot;center_horizontal&quot; android:layout_marginLeft=&quot;25dp&quot; android:layout_marginTop=&quot;12dp&quot; android:layout_marginRight=&quot;25dp&quot; android:layout_marginBottom=&quot;15dp&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;30dp&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;Button android:id=&quot;@+id/btn_cancel&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:background=&quot;#FDEEDF&quot; android:text=&quot;取消&quot; android:textColor=&quot;#f08519&quot; android:topRightRadius=&quot;20dp&quot; android:textSize=&quot;15sp&quot; android:layout_marginLeft=&quot;25dp&quot; android:layout_marginRight=&quot;5dp&quot; /&gt; &lt;View android:layout_width=&quot;10dp&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#fff&quot;&gt; &lt;/View&gt; &lt;Button android:id=&quot;@+id/btn_comfirm&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:background=&quot;#f08519&quot; android:textColor=&quot;#fff&quot; android:text=&quot;确定&quot; android:textSize=&quot;15sp&quot; android:layout_marginLeft=&quot;5dp&quot; android:layout_marginRight=&quot;25dp&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 二、添加Moudle类该类为已设计的弹出框提供提供React-Native调用入口。 package com.xxx.xxx;//您的包名 import android.app.Activity; import android.app.AlertDialog; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.support.annotation.Nullable; import android.util.DisplayMetrics; import android.view.View; import android.view.Window; import android.view.WindowManager; import android.widget.Button; import android.widget.TextView; import com.facebook.react.bridge.Callback; import com.facebook.react.bridge.ReactApplicationContext; import com.facebook.react.bridge.ReactContextBaseJavaModule; import com.facebook.react.bridge.ReactMethod; import com.facebook.react.modules.core.DeviceEventManagerModule; public class xxxModule extends ReactContextBaseJavaModule { private AlertDialog dialog=null; private static ReactApplicationContext mRAC; public xxxModule(ReactApplicationContext reactContext) { super(reactContext); mRAC=reactContext; } @Override public String getName() { return &quot;xxxModule&quot;; } @Override public boolean canOverrideExistingModule() { return true; } //弹出确认取消按钮框 @ReactMethod public void openConfirm(String message,String title, final Callback okBtnBack,final Callback cancelBack) { if (message == null || message.equals(&quot;&quot;)) return; Activity activity=getCurrentActivity(); AlertDialog.Builder builder = new AlertDialog.Builder(activity); View view = View.inflate(activity, R.layout.my_dialog, null); builder.setView(view); builder.setCancelable(true); if (title != null &amp;&amp; !title.equals(&quot;&quot;)) { TextView tit= (TextView) view.findViewById(R.id.title);//设置标题 tit.setText(title); } TextView input_edt= (TextView) view.findViewById(R.id.text_msg);//显示内容 input_edt.setText(message); //取消按钮点击事件 Button btn_cancel=(Button)view.findViewById(R.id.btn_cancel);//取消按钮 btn_cancel.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v) { if(dialog!=null) dialog.dismiss(); if(cancelBack!=null ) cancelBack.invoke(); } }); //确定按钮点击事件 Button btn_comfirm=(Button)view.findViewById(R.id.btn_comfirm);//确定按钮 btn_comfirm.setOnClickListener( new View.OnClickListener(){ @Override public void onClick(View v) { if(dialog!=null) dialog.dismiss(); if(okBtnBack!=null ) okBtnBack.invoke(); } } ); dialog = builder.create(); dialog.setCancelable(false); dialog.show(); //设置弹出框宽度 Window dialogWindow = dialog.getWindow(); WindowManager.LayoutParams lp = dialogWindow.getAttributes(); WindowManager m =activity.getWindowManager(); DisplayMetrics metrics = new DisplayMetrics(); m.getDefaultDisplay().getMetrics(metrics); lp.width = (int) (metrics.widthPixels * 0.8);//宽度 //lp.height = (int) (metrics.heightPixels * 0.8);//高度 dialogWindow.setAttributes(lp); } //关闭确认取消按钮框 @ReactMethod public void closeConfirm(){ if(dialog!=null) dialog.dismiss(); } } 三、通过Package类注册Moudle方法 如果没有则创建xxxPackage类 Package可用于管理所有的原生模块的注册。 package com.xxxxx.xxxx;//您的包名 import com.facebook.react.ReactPackage; import com.facebook.react.bridge.JavaScriptModule; import com.facebook.react.bridge.NativeModule; import com.facebook.react.bridge.ReactApplicationContext; import com.facebook.react.uimanager.ViewManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; class xxxPackage implements ReactPackage { @Override public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() { return Collections.emptyList(); } @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) { return Collections.emptyList(); } @Override public List&lt;NativeModule&gt; createNativeModules( ReactApplicationContext reactContext) { List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); ...//其他Module modules.add(new xxxModule(reactContext));//您的Moudle return modules; } } 四、在MainApplication中注册protected List&lt;ReactPackage&gt; getPackages() { return Arrays.&lt;ReactPackage&gt;asList( ...,//其他包 new xxxPackage() //您在第三步中创建或使用的Package类 ); } 五、前端(React-Native)调用var xxxModule = NativeModules.xxxModule;//xxxModule为第二步中的Moudle类中的getName方法的返回值 xxxModule .openConfirm(&quot;提示信息&quot;,&quot;标题&quot;,()=&gt;{ //“确认”按钮点击回调方法 },()=&gt;{ //“取消”按钮点击回调方法 });","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"人生如梦，岁月无情","slug":"lived","date":"2018-01-02T02:36:19.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/02/lived/","link":"","permalink":"http://yoursite.com/2018/01/02/lived/","excerpt":"","text":"人生如梦，岁月无情。豁然回首，才发现其实人活着也是一种心情，穷也好，富也好，得也好，失也罢。一切都是过眼云烟，想想：不管昨天今天明天，能豁然开朗就是美好的一天。不管亲情，友情，爱情。能永远珍惜就是好心情。计得有位朋友说过这样一句话：“曾经拥有的不要忘记；已经得到的更要珍惜；属于自己的不要放弃；已经失去的留做回忆；想要得到的一定要努力；累了把心靠岸；错了就不要后悔；苦了才懂得满足；痛了才享受生活；伤了才明白坚强；总有起风的清晨；总有暖和的午后；总有绚烂的黄昏；总有流星的夜晚；相逢是那样的奇妙，起风的日子道一声注意身体，天气寒冷” 生命的长河,过客匆匆.有些朋友.来了,去了,淡了,远了.有些朋友却是一生的知己和财富!他抑或是她.也许并不伟大,也不富有,他们在委屈的时候给你安慰,在你烦恼的时候,他们会静静的聆听;在你困顿的时候他们会竭尽所能。当所有的人都在关心你飞的高不高时,只有少数人在关心你飞得累不累.这就是朋友！！ 君子之交淡如水，真正的朋友也是这样：不会为了名利，金钱，美色，权势等而利用对方，博得对方的同情只要懂得自己的心意，人生得一知己足矣！！因此，我想对所有我的朋友说：“一定要照顾好自己，记得健康快乐比任何事都重要。生命中有你，真好！” 只有经历了苦难，才会懂得生命的价值！只有经历了苦难，才会懂得友谊的可贵！","categories":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}],"tags":[{"name":"人生感悟","slug":"人生感悟","permalink":"http://yoursite.com/tags/人生感悟/"}],"keywords":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}]},{"title":"写在博客所有文章之前","slug":"blog-start","date":"2018-01-01T04:15:58.000Z","updated":"2018-02-02T09:08:28.531Z","comments":true,"path":"2018/01/01/blog-start/","link":"","permalink":"http://yoursite.com/2018/01/01/blog-start/","excerpt":"","text":"就在2018年元旦放假的一天，我偶然在「 简书 」上看到了一片文章，大概是说教你5分钟内搭建一个自己的个人博客的文章，出于好奇我点了进去看了一下，心想现在各大博客平台那么多需要自己建吗，正好文章的作者也对这个疑虑给出了回答–用来装逼啊！ 于是我的博客搭建之旅开始了，虽然没有传说的5分钟就搭建好那么夸张，但是搭建过程也还算是顺利，基于Hexo搭建，看跟着教程一步步的完成，中途只是选择皮肤时花了一些时间，最终我选择了hexo-theme-snippet这款皮肤，稍作修改后用于了本博客，在此也感谢皮肤作者。此外对于使用Travis CI自动化构建的配置也花了一些时间，因为是第一次搞这个，处处有问题，虽然这个不是必须的，但是也是出于好奇心，不过最终还是成功搭建起来了。 博客成功搭建之后我开始考虑我应该在上面放些什么内容呢，想想这几年的工作经理，从一开始的/纯后台开发:C#/.Net/Web Form/Asp.net MVC…到渐渐的开始接触一些前端的东西:html/css/js/jquery/extjs/easyui/react-native/vue/webpack…，也许后台正在离我远去，但是我还是希望留下一些他的踪影，最终规划了网站的整体模块分为：前端／后端／工具／格言／成长经历。记录以后工作的点滴。 前端：记录一些怕是在前端开发中遇到的问题及解决方案，主要可能会是react-native 开发APP及html+css+js开发wap网页中的一些总结。 后端：记录.Net开发中遇到的问题及解决方案。 格言：记录一些怕是看到的好的文章，笑话等。 成长日记：记录一些工作中的成长过程，包括新知识，新心得…。 嗯…个人博客（装逼）之旅正式开始了……","categories":[{"name":"成长日记","slug":"成长日记","permalink":"http://yoursite.com/categories/成长日记/"}],"tags":[{"name":"About Me","slug":"About-Me","permalink":"http://yoursite.com/tags/About-Me/"}],"keywords":[{"name":"成长日记","slug":"成长日记","permalink":"http://yoursite.com/categories/成长日记/"}]}]}