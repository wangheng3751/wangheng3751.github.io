{"meta":{"title":"有恒则成","subtitle":null,"description":null,"author":"王恒","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Selenium初探--Nodejs+Selenium环境搭建及基础用法","slug":"selenium","date":"2018-01-17T08:44:08.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/17/selenium/","link":"","permalink":"http://yoursite.com/2018/01/17/selenium/","excerpt":"","text":"前言Selenium多用于系统的自动化测试，但有时候也可以用来做一些类似外挂一样的东西，比如定时打开某个网站去做一些操作，在不久前的项目中由于需要定时（实际是我方系统检测到有用户充值时）去操作一个合作公司的网站完成一些操作（实际是打开网站登录管理员账号去完成充值操作，因为合作方不能提供充值接口）。在考虑了macaca,appium,selenim（甚至按键精灵😄 ）等工具后最终选择了使用Nodejs+Selenium的方式完成。一路探索和尝试后完成了功能，在此做下记录和总结。 环境搭建1.安装 Nodejs到Nodejs官方下载地址下载最新稳定版本Nodejs后安装。安装成功后在命令行模式使用以下命令查看是否成功。成功后会显示相应的版本信息。 node -v 2.项目初始化创建一个文件夹（用户存放项目文件）后命令行模式进入到该文件夹下执行命令： npm init 3.配置selenium运行环境在上一步相同的命令行下运行以下命令至其运行安装完成。 npm install selenium-webdriver –save 4.安装浏览器驱动 安装Chrome驱动 npm install chromedriver –save 安装Firefox驱动 npm install geckodriver –save 安装IE驱动 npm install iedriver –save 说明：出现安装驱动后运行脚本提示驱动不正常之类的问题时可自行下载驱动放到与脚本相同的目录下试试。驱动下载地址：http://www.seleniumhq.org/download/ 基本用法一.初始化初始化一个浏览器并打开一个网页，如下：12345var webdriver = require(&apos;selenium-webdriver&apos;);var driver = new webdriver.Builder() .forBrowser(&apos;ie&apos;) .build();driver.get(&apos;http://www.baidu.com&apos;); 二.常用方法1.元素定位 根据id定位 1driver.findElement(By.id(&apos;ID&apos;))；//类似于jquery的$(&quot;#id&quot;) 根据className定位 1driver.findElement(By.className(&apos;Class&apos;))；//类似于jquery的$(&quot;.class&quot;) 更多定位方式可参考：http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_By.html 2.设置元素的值1driver.findElement(By.id(&apos;ID&apos;)).sendKeys(&apos;value&apos;);//类似于jquery的$(&quot;.id&quot;).val(&quot;value&quot;); 3.清空元素的值1driver.findElement(By.id(&apos;id&apos;)).clear(); 4.单击按钮1driver.findElement(By.id(&apos;id&apos;)).click(); 5.元素等待有时对一些元素需要等待页面跳转或操作完成才会显示，如果操作耗时或者网络原因，如果该元素还没出现就进行操作可能会跑出异常，这是我们需要设置一些等待，等待该元素出现在页面上时才能进行操作：123var until = webdriver.until;driver.wait(until.elementLocated(By.id(&apos;id&apos;), 10000));... 6.程序睡眠睡眠功能解决的问题和元素等待类似，更推荐使用元素等待方法。1driver.sleep(500);//毫秒 7.执行JavaScript在网页上运行一段javascript,此方法在selenium的使用中非常有用，当有些时候某个元素是在难以获取时，可使用该方法直接触发该元素本身的操作，例如某个按钮点击后执行网页跳转，但是我们难以定位该元素时可以直接使用以下方式跳转：1driver.executeScript(&apos;location.href=&quot;/xx.html&quot; &apos;); 或者需要给元素设置值时可以使用：1driver.executeScript(&apos;document.getElementById(&quot;id&quot;).value=&quot;value&quot;&apos;);//$(&quot;#id&quot;).val(&quot;value&quot;); 8.执行JavaScript并获取返回值在网页上运行JavaScript还可返回值，以供我们自动运行程序调用做出一些判断，比如可以检查网页上的某个值大于100做某种操作，小于100做另外一种操作。12345678driver.executeScript(&apos;return $(&quot;#id&quot;).val()&apos;).then(function(obj)&#123; //obj即为返回值 if(obj&gt;100)&#123; //操作 &#125;else&#123; //其他操作 &#125;&#125;) 9.切换作用域（switchTo） 切换到iframe网页中常常会嵌入一些iframe，或者是标签页面或者是弹窗的形式。这是要操作iframe里面的元素前就需把当前的作用域切换到iframe，切换后在切换会主页面前所有的操作都是针对iframe，在iframe内的操作结束后需切换回主页面。 1driver.switchTo().frame(driver.findElement(By.id(&quot;iframe-id&quot;))); //iframe-id为iframe元素的id 切换到弹出框有时候一些网页会弹出一些操作提示，提示框会堵塞整个任务的执行，需将其关闭(只针对原生的js弹出框)。 1234567driver.switchTo().alert().then(function(alert) &#123; //检测到弹出框时执行 //关闭alert return alert.dismiss();&#125;,function()&#123; //没有检测到弹出框时执行&#125;); 切换回主页面 1driver.switchTo().defaultContent(); 10.网页最大化（全屏）1driver.manage().window().maximize(); 11.网页截图(定位)网页截图看上去很简单，就一行代码如下：1driver.takeScreenshot()； 截图后的结果为base64格式，可自行处理。类似这样：123driver.takeScreenshot().then(function(d)&#123; //此处d即为截图结果base64字符串，可在此自行处理&#125;); 但是往往在实际应用中可能我们不需要一整个网页图片，我们值需要某部分的图片，这时候就需要换种方式了。在网上找到了一些信息（已不记得出处）后做了整理和亲测后记录如下：123456789101112131415161718driver.findElement(By.className(&apos;yanzheng&apos;)).then(function(obj)&#123; obj.getSize().then(function(size)&#123; obj.getLocation().then(function(loc)&#123; driver.takeScreenshot().then(function(d)&#123; var data=&#123; d:d, width:size.width, height:size.height, x:loc.x, y:loc.y &#125;; //此处省略以下两步 //1.提交data信息到服务器处理图片 //2.先根据d获取整张图片信息，再根据需要截取的元素的其实位置x,y以及长宽width,height截取相应的图片 &#125;) &#125; &#125;&#125;) 12.退出程序（关闭网页）1driver.quit(); 更多详细文档可参考官方文档：http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"Selenium","slug":"Selenium","permalink":"http://yoursite.com/tags/Selenium/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"原生js+css 实现手机滑动显示隐藏按钮功能","slug":"slide","date":"2018-01-17T03:37:59.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/17/slide/","link":"","permalink":"http://yoursite.com/2018/01/17/slide/","excerpt":"","text":"前言：最近做项目的过程中遇到需要在列表上可以有“修改”和“删除”按钮的需求，但由于在移动端，手机界面较小，在显示了其他必须内容后再直接显示两个按钮的话会导致界面很臃肿，难以适应各个机型，所以考虑采用模拟一些手机APP的做法，首先隐藏按钮，在用户按住某条数据左滑或者右滑时显示按钮。由于本人前端水平也很一般，只能各种百度搜罗文档之后终于实现了该功能，在此做下记录和总结，方便自己以后查询，同时供同样需要的朋友参考。 实例只实现了左滑显示，有右滑需求可仿照 效果预览： 1.HTML代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt; &lt;title&gt;侧滑&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;/&gt; &lt;script type=&apos;text/javascript&apos; src=&apos;index.js&apos; charset=&apos;utf-8&apos;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&apos;box&apos;&gt; &lt;div class=&quot;swipe-container&quot; &gt; &lt;div class=&quot;item-container&quot;&gt; &lt;img src=&quot;resource/logo.jpg&quot;/&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;title&quot;&gt;这里是标题&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;这里是简单描述 &lt;span&gt;2018-01-17&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;allow-right&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;action action-edit&quot;&gt;编辑&lt;/div&gt; &lt;div class=&quot;action action-delete&quot;&gt;删除&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;swipe-container&quot;&gt; &lt;div class=&quot;item-container&quot;&gt; &lt;img src=&quot;resource/logo.jpg&quot;/&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;title&quot;&gt;这里是标题&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;这里是简单描述 &lt;span&gt;2018-01-17&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;allow-right&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;action action-edit&quot;&gt;编辑&lt;/div&gt; &lt;div class=&quot;action action-delete&quot;&gt;删除&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;swipe-container&quot;&gt; &lt;div class=&quot;item-container&quot;&gt; &lt;img src=&quot;resource/logo.jpg&quot;/&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;title&quot;&gt;这里是标题&lt;/div&gt; &lt;div class=&quot;desc&quot;&gt;这里是简单描述 &lt;span&gt;2018-01-17&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;allow-right&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;action action-edit&quot;&gt;编辑&lt;/div&gt; &lt;div class=&quot;action action-delete&quot;&gt;删除&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 2.用到的一些CSS12345678910111213141516171819202122232425body&#123;background-color: #eee;margin:0;overflow-y:scroll;&#125;/*必须overflow-x:hidden 否则网页会整体出现横向滚动*/.box&#123;overflow-x:hidden;width:100%&#125;/*内容宽度占据整个页面宽度 使按钮被隐藏*/.item-container&#123;width:100%;padding:0.5rem;background-color: #fff;display: flex;align-items: center;height: 3.5rem&#125;.item-container img&#123;height: 3.5rem;width: 3.5rem&#125;.content&#123;flex:1;margin: 0 1rem&#125;.title&#123;font-size: 1rem;color: #000;margin-bottom:0.5rem&#125;.desc&#123;font-size: 0.9rem;color: #999&#125;.desc span&#123;float: right&#125;.allow-right&#123;width:2rem;height: 3.5rem;background:transparent url(resource/allow_right.png) no-repeat;background-size:1.5rem 1.5rem;background-position: center&#125;.action-delete&#123;background:#C95454&#125;.action-edit&#123;background:#00BCD4&#125;/*-webkit-transition:all 0.3s linear;transition:all 0.3s linear;使浏览器出现滑动效果width: 140%;内容占100% 两个按钮各占20% ，根据按钮数量和宽度调整*/.swipe-container&#123; margin-bottom:0.5rem;width: 140%;display: flex;-webkit-transition:all 0.3s linear;transition:all 0.3s linear;&#125;/*width:20%; 和swipe-container width: 140%;相对应*/.swipe-container .action&#123;width:20%;text-align:center;color:#fff;padding:0.5rem 0;line-height: 3.5rem;&#125;/*使元素向左滑动之后显示被隐藏的按钮 此处不知道原理 写40%不行 大概是因为此处的宽度是以swipe-container的总宽度为100%来计算，按钮的宽度20%则时以网页的宽度为100%来计算的，即 ：100*(20%)=140*(14.25%)根据按钮数量和宽度调整*/.swipeleft&#123;transform:translateX(-28.5%);-webkit-transform:translateX(-28.5%);&#125; 3.JS实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283 window.onload=function()&#123; setSlide(); var elems=document.getElementsByClassName(&quot;action-delete&quot;); for(var i=0;i&lt;elems.length;i++)&#123; elems[i].addEventListener(&quot;click&quot;, function()&#123; var r=confirm(&quot;确定要删除该记录吗?&quot;) if (r)&#123; alert(&quot;呵呵呵&quot;); &#125;else&#123; alert(&quot;哈哈哈&quot;); &#125; &#125;); &#125; &#125;; function setSlide() &#123; //侧滑显示删除按钮 var expansion = null; //是否存在展开的list var container = document.querySelectorAll(&quot;.swipe-container&quot;); for (var i = 0; i &lt; container.length; i++) &#123; var x, y, X, Y, swipeX, swipeY; container[i].addEventListener(&apos;touchstart&apos;, function (event) &#123; x = event.changedTouches[0].pageX; y = event.changedTouches[0].pageY; swipeX = true; swipeY = true; if (expansion) &#123; //判断是否展开 //如果展开则收起 以下代码取消注释后则滑动开始立即收起 注释后则向右滑动一定距离后收起隐藏按钮 //方法一. //removeClass(this,&quot;swipeleft&quot;); //方法二 需引入jquery //$(this).removeClass(&quot;swipeleft&quot;); &#125; &#125;); container[i].addEventListener(&apos;touchmove&apos;, function (event) &#123; X = event.changedTouches[0].pageX; Y = event.changedTouches[0].pageY; // 左右滑动 if (swipeX &amp;&amp; Math.abs(X - x) - Math.abs(Y - y) &gt; 0) &#123; // 阻止事件冒泡 event.stopPropagation(); if (X - x &gt; 10) &#123; //右滑收起 event.preventDefault(); removeClass(this,&quot;swipeleft&quot;); //$(this).removeClass(&quot;swipeleft&quot;); &#125; if (x - X &gt; 10) &#123; //左滑展开 event.preventDefault(); //$(this).addClass(&quot;swipeleft&quot;); addClass(this,&quot;swipeleft&quot;); expansion = this; &#125; swipeY = false; &#125; // 上下滑动 if (swipeY &amp;&amp; Math.abs(X - x) - Math.abs(Y - y) &lt; 0) &#123; swipeX = false; &#125; &#125;); &#125;&#125;function hasClass(elem, cls) &#123; cls = cls || &apos;&apos;; if (cls.replace(/\\s/g, &apos;&apos;).length == 0) return false; return new RegExp(&apos; &apos; + cls + &apos; &apos;).test(&apos; &apos; + elem.className + &apos; &apos;); &#125; function addClass(ele, cls) &#123; if (!hasClass(ele, cls)) &#123; ele.className = ele.className == &apos;&apos; ? cls : ele.className + &apos; &apos; + cls; &#125; &#125; function removeClass(ele, cls) &#123; if (hasClass(ele, cls)) &#123; var newClass = &apos; &apos; + ele.className.replace(/[\\t\\r\\n]/g, &apos;&apos;) + &apos; &apos;; while (newClass.indexOf(&apos; &apos; + cls + &apos; &apos;) &gt;= 0) &#123; newClass = newClass.replace(&apos; &apos; + cls + &apos; &apos;, &apos; &apos;); &#125; ele.className = newClass.replace(/^\\s+|\\s+$/g, &apos;&apos;); &#125; &#125; 4.在线效果预览预览地址：https://wangheng3751.github.io/assets/my-examples/sideslipping/index.html 或扫一扫下方二维码预览 5.源码地址Github访问地址 :https://github.com/wangheng3751/useful-example.front-end/tree/master/examples/sideslipping","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"html+css+js 实现拍照预览上传图片功能","slug":"take-picture","date":"2018-01-12T06:36:19.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/12/take-picture/","link":"","permalink":"http://yoursite.com/2018/01/12/take-picture/","excerpt":"","text":"前言：我们在做网页时经常会需要有上传图片的需求，可能是选择图片或者拍照上传，如果简单的使用 input type=”file” 这种方式虽然也能实现功能，但用户体验上可能会差了一些，所以本文记录了使用css+js实现图片选中后的预览及压缩上传功能，部分带来来源于网络，此处做了记录整理。 效果预览： 1.创建index.html12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt; &lt;title&gt;拍照上传&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;/&gt; &lt;script type=&apos;text/javascript&apos; src=&apos;index.js&apos; charset=&apos;utf-8&apos;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form id=&quot;mainForm&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;label&quot;&gt;身份证&lt;/div&gt; &lt;div class=&quot;img-area&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;input type=&quot;file&quot; id=&apos;id-face&apos; name=&apos;face&apos; accept=&quot;image/*&quot; /&gt; &lt;div id=&apos;face-empty-result&apos;&gt; &lt;img style=&apos;width:4rem&apos; src=&quot;https://github.com/wangheng3751/my-resources/blob/master/images/camera.png?raw=true&quot; alt=&quot;&quot;&gt; &lt;p&gt;身份证正面照&lt;/p&gt; &lt;/div&gt; &lt;img style=&apos;width: 100%&apos; id=&apos;face-result&apos;/&gt; &lt;/div&gt; &lt;div class=&quot;container&quot; style=&apos;margin-top:0.5rem;&apos;&gt; &lt;input type=&quot;file&quot; id=&apos;id-back&apos; name=&apos;back&apos; accept=&quot;image/*&quot; /&gt; &lt;div id=&apos;back-empty-result&apos;&gt; &lt;img style=&apos;width:4rem&apos; src=&quot;https://github.com/wangheng3751/my-resources/blob/master/images/camera.png?raw=true&quot; alt=&quot;&quot;&gt; &lt;p&gt;身份证反面照&lt;/p&gt; &lt;/div&gt; &lt;img style=&apos;width: 100%&apos; id=&apos;back-result&apos;/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;btn&quot;&gt; 提交 &lt;/div&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 2.创建index.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748body&#123; margin: 0&#125;.content&#123; padding:0.5rem; display: flex; align-items: center; border-bottom: 1px #999 solid&#125;.label&#123; width:5rem;&#125;.img-area&#123; flex:1&#125;.container&#123; background-color:#e7e7e7; position: relative;&#125;.container div&#123; text-align: center; padding:0.5rem 0&#125;.container input&#123; opacity:0; filter:alpha(opacity=0); height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 9;&#125;.container p&#123; font-size: 0.9rem; color:#999&#125;.btn&#123; background-color: #4363ab; color: #fff; text-align: center; padding: 0.5rem 1rem; width:80%; border-radius: 0.2rem; margin: 2rem auto; font-weight: 600; font-size: 1.2rem&#125; 3.创建index.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182window.onload=function()&#123; document.getElementById(&quot;id-face&quot;).addEventListener(&quot;change&quot;, function()&#123; onFileChange(this,&quot;face-result&quot;,&quot;face-empty-result&quot;) &#125;); document.getElementById(&quot;id-back&quot;).addEventListener(&quot;change&quot;, function()&#123; onFileChange(this,&quot;back-result&quot;,&quot;back-empty-result&quot;) &#125;); document.getElementsByClassName(&quot;btn&quot;)[0].addEventListener(&quot;click&quot;, function()&#123; submit(); &#125;);&#125;;/** * 选中图片时的处理 * @param &#123;*&#125; fileObj input file元素 * @param &#123;*&#125; el //选中后用于显示图片的元素ID * @param &#123;*&#125; btnel //未选中图片时显示的按钮区域ID */function onFileChange(fileObj,el,btnel)&#123; var windowURL = window.URL || window.webkitURL; var dataURL; var imgObj = document.getElementById(el); document.getElementById(btnel).style.display=&quot;none&quot;; imgObj.style.display=&quot;block&quot;; if (fileObj &amp;&amp; fileObj.files &amp;&amp; fileObj.files[0]) &#123; dataURL = windowURL.createObjectURL(fileObj.files[0]); imgObj.src=dataURL; &#125; else &#123; dataURL = fileObj.value; imgObj.style.filter = &quot;progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)&quot;; imgObj.filters.item(&quot;DXImageTransform.Microsoft.AlphaImageLoader&quot;).src = dataURL; &#125;&#125;/** * 将图片压缩后返回base64格式的数据 * @param &#123;*&#125; image img元素 * @param &#123;*&#125; width 压缩后图片宽度 * @param &#123;*&#125; height 压缩后图片高度 * @param &#123;*&#125; qua //图片质量1-100 */function compressImageTobase64(image,width,height,qua)&#123; var quality = qua ? qua / 100 : 0.8; var canvas = document.createElement(&quot;canvas&quot;), ctx = canvas.getContext(&apos;2d&apos;); var w = image.naturalWidth, h = image.naturalHeight; canvas.width = width||w; canvas.height = height||h; ctx.drawImage(image, 0, 0, w, h, 0, 0, width||w, height||h); var data = canvas.toDataURL(&quot;image/jpeg&quot;, quality); return data;&#125;//提交function submit()&#123; //1、form提交 //document.getElementById(&quot;mainForm&quot;).submit(); //2、压缩后ajax提交 var face_data=compressImageTobase64(document.getElementById(&quot;face-result&quot;),200,100,90); var back_data=compressImageTobase64(document.getElementById(&quot;back-result&quot;),200,100,90); var formData = new FormData(); formData.append(&quot;face&quot;,face_data); formData.append(&quot;back&quot;,back_data); //需引入jQuery $.ajax(&#123; url:&quot;/地址&quot;, type: &apos;POST&apos;, cache: false, data: formData, timeout:180000, processData: false, contentType: false, success:function(r)&#123; &#125;, error:function(r)&#123; &#125; &#125;);&#125; 扫一扫预览效果 源码获取：Github地址","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"React-Native 消息推送--Android混合推送","slug":"mixpush","date":"2018-01-09T06:10:00.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/09/mixpush/","link":"","permalink":"http://yoursite.com/2018/01/09/mixpush/","excerpt":"","text":"背景由于使用任何一种Android推送都很难在APP进程被杀死后收到推送，只有集成各厂商提供的系统级别推送才能完成此任务,故考虑小米、华为、魅族手机使用官方推送，其他手机使用个推推送！ 项目GitHub地址： https://github.com/wangheng3751/react-native-mixpush 安装：npm install --save react-native-mixpush-android 配置使用：1、配置android/settings.gradle123...include &apos;:react-native-mixpush-android&apos;project(&apos;:react-native-mixpush-android&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-mixpush-android&apos;) 2、配置app/build.gradle1234567891011manifestPlaceholders = [ PACKAGE_NAME : &quot;你的包名&quot;, //测试环境 GETUI_APP_ID : &quot;个推APPID&quot;, GETUI_APP_KEY : &quot;个推APPKEY&quot;, GETUI_APP_SECRET : &quot;个推APPSECRE&quot;]dependencies &#123; ... compile project(&quot;:react-native-mixpush-android&quot;)&#125; 3、配置android/build.gradle12345678910111213allprojects &#123; repositories &#123; mavenLocal() jcenter() ... //个推 maven &#123; url &quot;http://mvn.gt.igexin.com/nexus/content/repositories/releases/&quot; &#125; //华为推送 maven &#123;url &apos;http://developer.huawei.com/repo/&apos;&#125; &#125; &#125; 4、配置AndroidManifest.xmlmanifest节点下添加：12345678910111213141516&lt;!--小米推送--&gt; &lt;permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.MIPUSH_RECEIVE&quot; android:protectionLevel=&quot;signature&quot; /&gt; &lt;uses-permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.MIPUSH_RECEIVE&quot; /&gt; &lt;!--小米推送END--&gt; &lt;!--魅族推送--&gt; &lt;!-- 兼容flyme5.0以下版本，魅族内部集成pushSDK必填，不然无法收到消息--&gt; &lt;uses-permission android:name=&quot;com.meizu.flyme.push.permission.RECEIVE&quot;&gt;&lt;/uses-permission&gt; &lt;permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.push.permission.MESSAGE&quot; android:protectionLevel=&quot;signature&quot;/&gt; &lt;uses-permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.push.permission.MESSAGE&quot;&gt;&lt;/uses-permission&gt; &lt;!-- 兼容flyme3.0配置权限--&gt; &lt;uses-permission android:name=&quot;com.meizu.c2dm.permission.RECEIVE&quot; /&gt; &lt;permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.C2D_MESSAGE&quot; android:protectionLevel=&quot;signature&quot;&gt;&lt;/permission&gt; &lt;uses-permission android:name=&quot;$&#123;PACKAGE_NAME&#125;.permission.C2D_MESSAGE&quot;/&gt; &lt;!--魅族推送END--&gt; application节点下添加：1234567&lt;!--华为推送配置begin--&gt;&lt;meta-data android:name=&quot;com.huawei.hms.client.appid&quot; android:value=&quot;你的华为推送APPID&quot;/&gt;&lt;provider android:name=&quot;com.huawei.hms.update.provider.UpdateProvider&quot; android:authorities=&quot;$&#123;PACKAGE_NAME&#125;.hms.update.provider&quot; android:exported=&quot;false&quot; android:grantUriPermissions=&quot;true&quot; &gt;&lt;/provider&gt; 5、注册推送MainApplication中引用组件：12345678910import com.duanglink.rnmixpush.MixPushReactPackage;protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), ... new MixPushReactPackage() ); &#125; &#125;; MainActivity中注册推送：1234567891011121314151617import com.duanglink.huaweipush.HuaweiPushActivity; //特别注意：此处继承HuaweiPushActivity public class MainActivity extends HuaweiPushActivity &#123; @Override public void onCreate(Bundle savedInstanceState) &#123; if(savedInstanceState==null)&#123; savedInstanceState=new Bundle(); &#125; savedInstanceState.putString(&quot;meizuAppId&quot;,&quot;魅族AppId&quot;); savedInstanceState.putString(&quot;meizuAppKey&quot;,&quot;魅族AppKey&quot;); savedInstanceState.putString(&quot;xiaomiAppId&quot;,&quot;小米AppId&quot;); savedInstanceState.putString(&quot;xiaomiAppKey&quot;,&quot;小米AppKey&quot;); super.onCreate(savedInstanceState); &#125; ... &#125; 6、React-Native客户端接收事件：1234567var &#123; NativeAppEventEmitter &#125; = require(&apos;react-native&apos;);NativeAppEventEmitter.addListener( &apos;receiveRemoteNotification&apos;, (notification) =&gt; &#123; Alert.alert(&apos;消息通知&apos;,JSON.stringify(notification)); &#125;); 7、React-Native客户端方法说明：123456import MixPush from &apos;react-native-mixpush-android&apos;;- MixPush.setAlias(alias); //设置别名- MixPush.unsetAlias(alias); //取消设置别名- MixPush.setTags(tags); //设置用户标签- MixPush.unsetTags(tags); //取消设置用户标签- MixPush.getClientId(); //获取客户端ID 以上方法均不支持华为手机 说明：getClientId获取到的ID为用户在推送平台的唯一标识（小米：regId，魅族：pushId;个推：clientId），用于定向推送; 此外,所有推送平台在APP推送注册成功后会往客户端发送一次注册成功事件(包含华为:deviceToken)，事件名为:”receiveClientId”,并携带clientId,可使用该事件与getClientId方法配合使用达到获取clientId的目的。 实例： 123456789101112 //主动获取&lt;br&gt; MixPush.getClientId((cid)=&gt;&#123; alert(&quot;cid:&quot;+cid);//自行处理cid代码&#125;); //监听事件&lt;br&gt; NativeAppEventEmitter.addListener( &apos;receiveClientId&apos;, (cid) =&gt; &#123; alert(&quot;cid:&quot;+cid);//自行处理cid代码 &#125;); 说明后台推送使用各平台后台管理系统或自行集成SDK。 项目QQ交流群：516032289","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"React-Native 自定义Android原生组件--弹出提示框","slug":"react-native-component","date":"2018-01-02T06:10:00.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/02/react-native-component/","link":"","permalink":"http://yoursite.com/2018/01/02/react-native-component/","excerpt":"","text":"特别说明：本文仅适合未接触过或不熟悉Android原生开发的React-Native新手开发者！ 背景：使用React-Native开发Android APP时，虽然React-Native已经自带弹出提示框组件Alert，但由于各大手机厂商系统风格各异，在使用React-Native自带的弹出提示组件时也风格不一，并且大部分机型的弹出框样式比较难看，或者和APP的整体风格设计不协调，当然也可以使用Modal来实现弹出框，但是又得在所有需要的View添加Modal相应标签，较为繁琐，所以本文介绍一个简单的自定义弹出框的基本步骤。 效果预览： 一、设计布局文件弹出框多为提示框（alert），确认框（confirm）本实例展示一个简单的确认框（即包含“确认”和“取消”按钮）。具体的文字，颜色，背景色等按需修改为和UI设计风格较为统一的即可（可在Android Studio 中可视化设计）！ &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:background=&quot;#fff&quot; android:paddingBottom=&quot;15dp&quot;&gt; &lt;TextView android:id=&quot;@+id/title&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;#fff&quot; android:gravity=&quot;center&quot; android:padding=&quot;5dp&quot; android:text=&quot;温馨提示&quot; android:textSize=&quot;16sp&quot; android:textColor=&quot;#f18518&quot; /&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0.5dp&quot; android:background=&quot;#f18518&quot;&gt; &lt;/View&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textAppearance=&quot;?android:attr/textAppearanceSmall&quot; android:text=&quot;您的提示信息，后期从js端传入！&quot; android:id=&quot;@+id/text_msg&quot; android:textSize=&quot;15sp&quot; android:textColor=&quot;#000&quot; android:layout_gravity=&quot;center_horizontal&quot; android:layout_marginLeft=&quot;25dp&quot; android:layout_marginTop=&quot;12dp&quot; android:layout_marginRight=&quot;25dp&quot; android:layout_marginBottom=&quot;15dp&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;30dp&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;Button android:id=&quot;@+id/btn_cancel&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:background=&quot;#FDEEDF&quot; android:text=&quot;取消&quot; android:textColor=&quot;#f08519&quot; android:topRightRadius=&quot;20dp&quot; android:textSize=&quot;15sp&quot; android:layout_marginLeft=&quot;25dp&quot; android:layout_marginRight=&quot;5dp&quot; /&gt; &lt;View android:layout_width=&quot;10dp&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#fff&quot;&gt; &lt;/View&gt; &lt;Button android:id=&quot;@+id/btn_comfirm&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_weight=&quot;1&quot; android:background=&quot;#f08519&quot; android:textColor=&quot;#fff&quot; android:text=&quot;确定&quot; android:textSize=&quot;15sp&quot; android:layout_marginLeft=&quot;5dp&quot; android:layout_marginRight=&quot;25dp&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 二、添加Moudle类该类为已设计的弹出框提供提供React-Native调用入口。 package com.xxx.xxx;//您的包名 import android.app.Activity; import android.app.AlertDialog; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.support.annotation.Nullable; import android.util.DisplayMetrics; import android.view.View; import android.view.Window; import android.view.WindowManager; import android.widget.Button; import android.widget.TextView; import com.facebook.react.bridge.Callback; import com.facebook.react.bridge.ReactApplicationContext; import com.facebook.react.bridge.ReactContextBaseJavaModule; import com.facebook.react.bridge.ReactMethod; import com.facebook.react.modules.core.DeviceEventManagerModule; public class xxxModule extends ReactContextBaseJavaModule { private AlertDialog dialog=null; private static ReactApplicationContext mRAC; public xxxModule(ReactApplicationContext reactContext) { super(reactContext); mRAC=reactContext; } @Override public String getName() { return &quot;xxxModule&quot;; } @Override public boolean canOverrideExistingModule() { return true; } //弹出确认取消按钮框 @ReactMethod public void openConfirm(String message,String title, final Callback okBtnBack,final Callback cancelBack) { if (message == null || message.equals(&quot;&quot;)) return; Activity activity=getCurrentActivity(); AlertDialog.Builder builder = new AlertDialog.Builder(activity); View view = View.inflate(activity, R.layout.my_dialog, null); builder.setView(view); builder.setCancelable(true); if (title != null &amp;&amp; !title.equals(&quot;&quot;)) { TextView tit= (TextView) view.findViewById(R.id.title);//设置标题 tit.setText(title); } TextView input_edt= (TextView) view.findViewById(R.id.text_msg);//显示内容 input_edt.setText(message); //取消按钮点击事件 Button btn_cancel=(Button)view.findViewById(R.id.btn_cancel);//取消按钮 btn_cancel.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v) { if(dialog!=null) dialog.dismiss(); if(cancelBack!=null ) cancelBack.invoke(); } }); //确定按钮点击事件 Button btn_comfirm=(Button)view.findViewById(R.id.btn_comfirm);//确定按钮 btn_comfirm.setOnClickListener( new View.OnClickListener(){ @Override public void onClick(View v) { if(dialog!=null) dialog.dismiss(); if(okBtnBack!=null ) okBtnBack.invoke(); } } ); dialog = builder.create(); dialog.setCancelable(false); dialog.show(); //设置弹出框宽度 Window dialogWindow = dialog.getWindow(); WindowManager.LayoutParams lp = dialogWindow.getAttributes(); WindowManager m =activity.getWindowManager(); DisplayMetrics metrics = new DisplayMetrics(); m.getDefaultDisplay().getMetrics(metrics); lp.width = (int) (metrics.widthPixels * 0.8);//宽度 //lp.height = (int) (metrics.heightPixels * 0.8);//高度 dialogWindow.setAttributes(lp); } //关闭确认取消按钮框 @ReactMethod public void closeConfirm(){ if(dialog!=null) dialog.dismiss(); } } 三、通过Package类注册Moudle方法 如果没有则创建xxxPackage类 Package可用于管理所有的原生模块的注册。 package com.xxxxx.xxxx;//您的包名 import com.facebook.react.ReactPackage; import com.facebook.react.bridge.JavaScriptModule; import com.facebook.react.bridge.NativeModule; import com.facebook.react.bridge.ReactApplicationContext; import com.facebook.react.uimanager.ViewManager; import java.util.ArrayList; import java.util.Collections; import java.util.List; class xxxPackage implements ReactPackage { @Override public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() { return Collections.emptyList(); } @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) { return Collections.emptyList(); } @Override public List&lt;NativeModule&gt; createNativeModules( ReactApplicationContext reactContext) { List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); ...//其他Module modules.add(new xxxModule(reactContext));//您的Moudle return modules; } } 四、在MainApplication中注册protected List&lt;ReactPackage&gt; getPackages() { return Arrays.&lt;ReactPackage&gt;asList( ...,//其他包 new xxxPackage() //您在第三步中创建或使用的Package类 ); } 五、前端(React-Native)调用var xxxModule = NativeModules.xxxModule;//xxxModule为第二步中的Moudle类中的getName方法的返回值 xxxModule .openConfirm(&quot;提示信息&quot;,&quot;标题&quot;,()=&gt;{ //“确认”按钮点击回调方法 },()=&gt;{ //“取消”按钮点击回调方法 });","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"React-Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"人生如梦，岁月无情","slug":"lived","date":"2018-01-02T02:36:19.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/02/lived/","link":"","permalink":"http://yoursite.com/2018/01/02/lived/","excerpt":"","text":"人生如梦，岁月无情。豁然回首，才发现其实人活着也是一种心情，穷也好，富也好，得也好，失也罢。一切都是过眼云烟，想想：不管昨天今天明天，能豁然开朗就是美好的一天。不管亲情，友情，爱情。能永远珍惜就是好心情。计得有位朋友说过这样一句话：“曾经拥有的不要忘记；已经得到的更要珍惜；属于自己的不要放弃；已经失去的留做回忆；想要得到的一定要努力；累了把心靠岸；错了就不要后悔；苦了才懂得满足；痛了才享受生活；伤了才明白坚强；总有起风的清晨；总有暖和的午后；总有绚烂的黄昏；总有流星的夜晚；相逢是那样的奇妙，起风的日子道一声注意身体，天气寒冷” 生命的长河,过客匆匆.有些朋友.来了,去了,淡了,远了.有些朋友却是一生的知己和财富!他抑或是她.也许并不伟大,也不富有,他们在委屈的时候给你安慰,在你烦恼的时候,他们会静静的聆听;在你困顿的时候他们会竭尽所能。当所有的人都在关心你飞的高不高时,只有少数人在关心你飞得累不累.这就是朋友！！ 君子之交淡如水，真正的朋友也是这样：不会为了名利，金钱，美色，权势等而利用对方，博得对方的同情只要懂得自己的心意，人生得一知己足矣！！因此，我想对所有我的朋友说：“一定要照顾好自己，记得健康快乐比任何事都重要。生命中有你，真好！” 只有经历了苦难，才会懂得生命的价值！只有经历了苦难，才会懂得友谊的可贵！","categories":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}],"tags":[{"name":"人生感悟","slug":"人生感悟","permalink":"http://yoursite.com/tags/人生感悟/"}],"keywords":[{"name":"格言","slug":"格言","permalink":"http://yoursite.com/categories/格言/"}]},{"title":"后端模块","slug":"backend","date":"2018-01-01T06:31:07.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/01/backend/","link":"","permalink":"http://yoursite.com/2018/01/01/backend/","excerpt":"","text":"哎～我的大后端，生活所迫，稀里糊涂的这都两年没搞后端开发了，这两年从做React-Native开始，渐渐的转向了手机APP的开发，以及Wap网页的开发，什么React-Native，什么Week,又是什么Angular.js,什么Vue.js,什么React.js;什么鬼的Less／Sass，什么Redux,什么Glup,什么Webpack! 哎～我已迷失了方向！！ 我的大后端，我的.Net,我会回来的！！！","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://yoursite.com/tags/C/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}]},{"title":"写在博客所有文章之前","slug":"blog-start","date":"2018-01-01T04:15:58.000Z","updated":"2018-01-19T03:35:06.733Z","comments":true,"path":"2018/01/01/blog-start/","link":"","permalink":"http://yoursite.com/2018/01/01/blog-start/","excerpt":"","text":"就在2018年元旦放假回来的第一天，我偶然在简书上看到了一片文章，大概是说教你5分钟内搭建一个自己的个人博客的文章，出于好奇我点了进去看了一下，心想现在各大博客平台那么多需要自己建吗，正好文章的作者也对这个疑虑给出了回答–用来装逼啊！ 于是我的博客搭建之旅开始了，虽然没有传说的5分钟就搭建好那么夸张，但是搭建过程也还算是顺利，基于Hexo搭建，看跟着教程一步步的完成，中途只是选择皮肤时花了一些时间，最终我选择了hexo-theme-snippet这款皮肤，稍作修改后用于了本博客，在此也感谢皮肤作者。此外对于使用Travis CI自动化构建的配置也花了一些时间，因为是第一次搞这个，处处有问题，虽然这个不是必须的，但是也是出于好奇心，不过最终还是成功搭建起来了。 博客成功搭建之后我开始考虑我应该在上面放些什么内容呢，想想这几年的工作经理，从一开始的/纯后台开发:C#/.Net/Web Form/Asp.net MVC…到渐渐的开始接触一些前端的东西:html/css/js/jquery/extjs/easyui/react-native/vue/webpack…，也许后台正在离我远去，但是我还是希望留下一些他的踪影，最终规划了网站的整体模块分为：前端／后端／工具／格言／成长经历。记录以后工作的点滴。 前端：记录一些怕是在前端开发中遇到的问题及解决方案，主要可能会是react-native 开发APP及html+css+js开发wap网页中的一些总结。 后端：记录.Net开发中遇到的问题及解决方案。 格言：记录一些怕是看到的好的文章，笑话等。 成长日记：记录一些工作中的成长过程，包括新知识，新心得…。 嗯…个人博客（装逼）之旅正式开始了……","categories":[{"name":"成长日记","slug":"成长日记","permalink":"http://yoursite.com/categories/成长日记/"}],"tags":[{"name":"About Me","slug":"About-Me","permalink":"http://yoursite.com/tags/About-Me/"}],"keywords":[{"name":"成长日记","slug":"成长日记","permalink":"http://yoursite.com/categories/成长日记/"}]}]}